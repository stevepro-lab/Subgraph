type UniswapV2ZapOutGeneralV2ZapOut @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _ToTokenContractAddress: Bytes! # address
  _FromUniPoolAddress: Bytes! # address
  _IncomingLP: BigInt! # uint256
  _minTokensRec: BigInt! # uint256
  value0: BigInt # uint256
}

type UniswapV2ZapOutGeneralV2ZapOut2PairToken @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _FromUniPoolAddress: Bytes! # address
  _IncomingLP: BigInt! # uint256
  amountA: BigInt # uint256
  amountB: BigInt # uint256
}

type UniswapV2ZapOutGeneralV2inCaseTokengetsStuck @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _TokenAddress: Bytes! # address
}

type UniswapV2ZapOutGeneralV2renounceOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type UniswapV2ZapOutGeneralV2setnewdzgoodwillAddress @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _new_dzgoodwillAddress: Bytes! # address
}

type UniswapV2ZapOutGeneralV2setnewgoodwill @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _new_goodwill: Int! # uint16
}

type UniswapV2ZapOutGeneralV2toggleContractActive @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type UniswapV2ZapOutGeneralV2transferOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
  newOwner: Bytes! # address
}

type UniswapV2ZapOutGeneralV2withdraw @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type CurveZapInGeneralV14ZapIn @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _toWhomToIssue: Bytes! # address
  _IncomingTokenAddress: Bytes! # address
  _curvePoolExchangeAddress: Bytes! # address
  _IncomingTokenQty: BigInt! # uint256
  _minPoolTokens: BigInt! # uint256
  crvTokensBought: BigInt # uint256
}

type CurveZapInGeneralV14approveToken @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type CurveZapInGeneralV14inCaseTokengetsStuck @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _TokenAddress: Bytes! # address
}

type CurveZapInGeneralV14renounceOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type CurveZapInGeneralV14setnewdzgoodwillAddress @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _new_dzgoodwillAddress: Bytes! # address
}

type CurveZapInGeneralV14setnewgoodwill @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _new_goodwill: Int! # uint16
}

type CurveZapInGeneralV14toggleContractActive @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type CurveZapInGeneralV14transferOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
  newOwner: Bytes # address
}

type CurveZapInGeneralV14withdraw @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type CurveGeneralZapOutV2ZapOut @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _toWhomToIssue: Bytes! # address
  _curveExchangeAddress: Bytes! # address
  _tokenCount: BigInt! # uint256
  _IncomingCRV: BigInt! # uint256
  _ToTokenAddress: Bytes! # address
  _minToTokens: BigInt! # uint256
  ToTokensBought: BigInt # uint256
}

type CurveGeneralZapOutV2ZapoutToUnderlying @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _toWhomToIssue: Bytes! # address
  _curveExchangeAddress: Bytes! # address
  _IncomingCRV: BigInt! # uint256
  _tokenCount: BigInt! # uint256
}

type CurveGeneralZapOutV2token2Eth @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _FromTokenContractAddress: Bytes! # address
  tokens2Trade: BigInt! # uint256
  _toWhomToIssue: Bytes! # address
  value0: BigInt # uint256
}

type CurveGeneralZapOutV2token2Token @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _FromTokenContractAddress: Bytes! # address
  _ToWhomToIssue: Bytes! # address
  _ToTokenContractAddress: Bytes! # address
  tokens2Trade: BigInt! # uint256
  tokenBought: BigInt # uint256
}

type CurveGeneralZapOutV2addCRVToken @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _exchangeAddress: Bytes! # address
  _crvTokenAddress: Bytes! # address
}

type CurveGeneralZapOutV2addCToken @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _cToken: Bytes! # address
  _underlyingToken: Bytes! # address
}

type CurveGeneralZapOutV2addYToken @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _yToken: Bytes! # address
  _underlyingToken: Bytes! # address
}

type CurveGeneralZapOutV2approveToken @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type CurveGeneralZapOutV2inCaseTokengetsStuck @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _TokenAddress: Bytes! # address
}

type CurveGeneralZapOutV2renounceOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type CurveGeneralZapOutV2setCRVTokenAddresses @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type CurveGeneralZapOutV2setnewdzgoodwillAddress @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _new_dzgoodwillAddress: Bytes! # address
}

type CurveGeneralZapOutV2setnewgoodwill @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _new_goodwill: Int! # uint16
}

type CurveGeneralZapOutV2setnewsUSDTokenAddress @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _new_sUSDTokenAddress: Bytes! # address
}

type CurveGeneralZapOutV2setcTokens @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type CurveGeneralZapOutV2setyTokens @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type CurveGeneralZapOutV2toggleContractActive @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type CurveGeneralZapOutV2transferOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
  newOwner: Bytes # address
}

type CurveGeneralZapOutV2withdraw @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type BalancerZapOutGeneralV2EasyZapOut @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _ToTokenContractAddress: Bytes! # address
  _FromBalancerPoolAddress: Bytes! # address
  _IncomingBPT: BigInt! # uint256
  _minTokensRec: BigInt! # uint256
  value0: BigInt # uint256
}

type BalancerZapOutGeneralV2ZapOut @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _toWhomToIssue: Bytes! # address
  _ToTokenContractAddress: Bytes! # address
  _FromBalancerPoolAddress: Bytes! # address
  _IncomingBPT: BigInt! # uint256
  _IntermediateToken: Bytes! # address
  _minTokensRec: BigInt! # uint256
  value0: BigInt # uint256
}

type BalancerZapOutGeneralV2inCaseTokengetsStuck @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _TokenAddress: Bytes! # address
}

type BalancerZapOutGeneralV2renounceOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type BalancerZapOutGeneralV2setnewdzgoodwillAddress @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _new_dzgoodwillAddress: Bytes! # address
}

type BalancerZapOutGeneralV2setnewgoodwill @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _new_goodwill: Int! # uint16
}

type BalancerZapOutGeneralV2toggleContractActive @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type BalancerZapOutGeneralV2transferOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
  newOwner: Bytes # address
}

type BalancerZapOutGeneralV2withdraw @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type UniswapV1ZapOutGeneralV2LetsWithdrawonlyERC @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _TokenContractAddress: Bytes! # address
  LiquidityTokenSold: BigInt! # uint256
  _minTokensRec: BigInt! # uint256
  _returnInDai: Boolean! # bool
  value0: Boolean # bool
}

type UniswapV1ZapOutGeneralV2LetsWithdrawonlyETH @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _TokenContractAddress: Bytes! # address
  LiquidityTokenSold: BigInt! # uint256
  _minEthRec: BigInt! # uint256
  value0: Boolean # bool
}

type UniswapV1ZapOutGeneralV2inCaseTokengetsStuck @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _TokenAddress: Bytes! # address
}

type UniswapV1ZapOutGeneralV2renounceOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type UniswapV1ZapOutGeneralV2setnewgoodwill @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _new_goodwill: Int! # uint16
}

type UniswapV1ZapOutGeneralV2toggleContractActive @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type UniswapV1ZapOutGeneralV2transferOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
  newOwner: Bytes # address
}

type UniswapV1ZapOutGeneralV2withdraw @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type UniCurvePipeCurve2Uni @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _toWhomToIssue: Bytes! # address
  _incomingCurveExchange: Bytes! # address
  _IncomingCRV: BigInt! # uint256
  _toUniUnderlyingTokenAddress: Bytes! # address
}

type UniCurvePipeUni2Curve @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _toWhomToIssue: Bytes! # address
  _incomingUniUnderlyingTokenAddress: Bytes! # address
  _IncomingLPT: BigInt! # uint256
  _toCurveExchange: Bytes! # address
}

type UniCurvePipeapproveToken @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type UniCurvePipedestruct @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type UniCurvePipeinCaseTokengetsStuck @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _TokenAddress: Bytes! # address
}

type UniCurvePiperenounceOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type UniCurvePipetoggleContractActive @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type UniCurvePipetransferOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
  newOwner: Bytes # address
}

type UniCurvePipewithdraw @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type UniV1V2PipeV1toV2Pipe @entity {
  id: ID!
  timestamp: BigInt! # uint256
  fromTokenAddress: Bytes! # address
  uniV1Amount: BigInt! # uint256
  toTokenAddress: Bytes! # address
  toWhomToIssue: Bytes! # address
  value0: BigInt # uint256
}

type UniV1V2Pipedestruct @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type UniV1V2PipeinCaseTokengetsStuck @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _TokenAddress: Bytes! # address
}

type UniV1V2PiperenounceOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type UniV1V2PipesetnewdzgoodwillAddress @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _new_dzgoodwillAddress: Bytes! # address
}

type UniV1V2Pipesetnewgoodwill @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _new_goodwill: Int! # uint16
}

type UniV1V2PipetoggleContractActive @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type UniV1V2PipetransferOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
  newOwner: Bytes! # address
}

type UniV1V2Pipewithdraw @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type UniswapV2ZapInGeneralV2ZapIn @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _FromTokenContractAddress: Bytes! # address
  _ToUnipoolToken0: Bytes! # address
  _ToUnipoolToken1: Bytes! # address
  _amount: BigInt! # uint256
  _minPoolTokens: BigInt! # uint256
  value0: BigInt # uint256
}

type UniswapV2ZapInGeneralV2inCaseTokengetsStuck @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _TokenAddress: Bytes! # address
}

type UniswapV2ZapInGeneralV2renounceOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type UniswapV2ZapInGeneralV2setnewdzgoodwillAddress @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _new_dzgoodwillAddress: Bytes! # address
}

type UniswapV2ZapInGeneralV2setnewgoodwill @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _new_goodwill: Int! # uint16
}

type UniswapV2ZapInGeneralV2toggleContractActive @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type UniswapV2ZapInGeneralV2transferOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
  newOwner: Bytes! # address
}

type UniswapV2ZapInGeneralV2withdraw @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type MultiPoolZapV14multipleZapIn @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _IncomingTokenContractAddress: Bytes! # address
  _IncomingTokenQty: BigInt! # uint256
  underlyingTokenAddresses: [Bytes]! # address[]
  respectiveWeightedValues: [BigInt]! # uint256[]
}

type MultiPoolZapV14renounceOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type MultiPoolZapV14setUniswapFactory @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _UniswapFactory: Bytes! # address
}

type MultiPoolZapV14setnewdzgoodwillAddress @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _new_dzgoodwillAddress: Bytes! # address
}

type MultiPoolZapV14setnewgoodwill @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _new_goodwill: Int! # uint16
}

type MultiPoolZapV14setuniswapPoolZapAddress @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _uniswapPoolZapAddress: Bytes! # address
}

type MultiPoolZapV14transferOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
  newOwner: Bytes! # address
}

type CurvetoCurvePipeCurve2Curve @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _toWhomToIssue: Bytes! # address
  _incomingCurveExchange: Bytes! # address
  _IncomingCRV: BigInt! # uint256
  _toCurveExchange: Bytes! # address
}

type CurvetoCurvePipeapproveToken @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type CurvetoCurvePipedestruct @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type CurvetoCurvePipeinCaseTokengetsStuck @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _TokenAddress: Bytes! # address
}

type CurvetoCurvePiperenounceOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type CurvetoCurvePipetoggleContractActive @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type CurvetoCurvePipetransferOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
  newOwner: Bytes! # address
}

type CurvetoCurvePipewithdraw @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type BalancerUniswapV2PipeV11PipeBalancerUniV2 @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _FromBalancerPoolAddress: Bytes! # address
  _IncomingBPT: BigInt! # uint256
  _toUniswapPoolAddress: Bytes! # address
  _toWhomToIssue: Bytes! # address
  _minUniV2Tokens: BigInt! # uint256
  value0: BigInt # uint256
}

type BalancerUniswapV2PipeV11PipeUniV2Balancer @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _FromUniswapPoolAddress: Bytes! # address
  _IncomingLPT: BigInt! # uint256
  _ToBalancerPoolAddress: Bytes! # address
  _toWhomToIssue: Bytes! # address
  _minBPTokens: BigInt! # uint256
  value0: BigInt # uint256
}

type BalancerUniswapV2PipeV11inCaseTokengetsStuck @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _TokenAddress: Bytes! # address
}

type BalancerUniswapV2PipeV11renounceOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type BalancerUniswapV2PipeV11toggleContractActive @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type BalancerUniswapV2PipeV11transferOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
  newOwner: Bytes! # address
}

type BalancerUniswapV2PipeV11updateZapAddresses @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _balancerUnZap: Bytes! # address
  _uniZapIn: Bytes! # address
  _balancerZapIn: Bytes! # address
  _uniUnZap: Bytes! # address
}

type BalancerUniswapV2PipeV11withdraw @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type BalancerZapInGeneralV25EasyZapIn @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _FromTokenContractAddress: Bytes! # address
  _ToBalancerPoolAddress: Bytes! # address
  _amount: BigInt! # uint256
  _minPoolTokens: BigInt! # uint256
  tokensBought: BigInt # uint256
}

type BalancerZapInGeneralV25token2Token @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _FromTokenContractAddress: Bytes! # address
  _ToTokenContractAddress: Bytes! # address
  tokens2Trade: BigInt! # uint256
  tokenBought: BigInt # uint256
}

type BalancerZapInGeneralV25inCaseTokengetsStuck @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _TokenAddress: Bytes! # address
}

type BalancerZapInGeneralV25renounceOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type BalancerZapInGeneralV25setnewgoodwill @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _new_goodwill: Int! # uint16
}

type BalancerZapInGeneralV25toggleContractActive @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type BalancerZapInGeneralV25transferOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
  newOwner: Bytes! # address
}

type BalancerZapInGeneralV25withdraw @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type UnipoolBridgeZapV1ZapBridge @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _toWhomToIssue: Bytes! # address
  _FromTokenContractAddress: Bytes! # address
  _ToTokenContractAddress: Bytes! # address
  _IncomingLP: BigInt! # uint256
  value0: Boolean # bool
}

type UnipoolBridgeZapV1destruct @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type UnipoolBridgeZapV1inCaseTokengetsStuck @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _TokenAddress: Bytes! # address
}

type UnipoolBridgeZapV1renounceOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type UnipoolBridgeZapV1setnewUniSwapFactoryAddress @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _new_UniSwapFactoryAddress: Bytes! # address
}

type UnipoolBridgeZapV1setnewdzgoodwillAddress @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _new_dzgoodwillAddress: Bytes! # address
}

type UnipoolBridgeZapV1setnewgoodwill @entity {
  id: ID!
  timestamp: BigInt! # uint256
  _new_goodwill: Int! # uint16
}

type UnipoolBridgeZapV1toggleContractActive @entity {
  id: ID!
  timestamp: BigInt! # uint256
}

type UnipoolBridgeZapV1transferOwnership @entity {
  id: ID!
  timestamp: BigInt! # uint256
  newOwner: Bytes! # address
}

type UnipoolBridgeZapV1withdraw @entity {
  id: ID!
  timestamp: BigInt! # uint256
}
