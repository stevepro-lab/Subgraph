// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BalancerUniswapV2PipeV11 extends ethereum.SmartContract {
  static bind(address: Address): BalancerUniswapV2PipeV11 {
    return new BalancerUniswapV2PipeV11("BalancerUniswapV2PipeV11", address);
  }

  PipeBalancerUniV2(
    _FromBalancerPoolAddress: Address,
    _IncomingBPT: BigInt,
    _toUniswapPoolAddress: Address,
    _toWhomToIssue: Address,
    _minUniV2Tokens: BigInt
  ): BigInt {
    let result = super.call(
      "PipeBalancerUniV2",
      "PipeBalancerUniV2(address,uint256,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_FromBalancerPoolAddress),
        ethereum.Value.fromUnsignedBigInt(_IncomingBPT),
        ethereum.Value.fromAddress(_toUniswapPoolAddress),
        ethereum.Value.fromAddress(_toWhomToIssue),
        ethereum.Value.fromUnsignedBigInt(_minUniV2Tokens)
      ]
    );

    return result[0].toBigInt();
  }

  try_PipeBalancerUniV2(
    _FromBalancerPoolAddress: Address,
    _IncomingBPT: BigInt,
    _toUniswapPoolAddress: Address,
    _toWhomToIssue: Address,
    _minUniV2Tokens: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PipeBalancerUniV2",
      "PipeBalancerUniV2(address,uint256,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_FromBalancerPoolAddress),
        ethereum.Value.fromUnsignedBigInt(_IncomingBPT),
        ethereum.Value.fromAddress(_toUniswapPoolAddress),
        ethereum.Value.fromAddress(_toWhomToIssue),
        ethereum.Value.fromUnsignedBigInt(_minUniV2Tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PipeUniV2Balancer(
    _FromUniswapPoolAddress: Address,
    _IncomingLPT: BigInt,
    _ToBalancerPoolAddress: Address,
    _toWhomToIssue: Address,
    _minBPTokens: BigInt
  ): BigInt {
    let result = super.call(
      "PipeUniV2Balancer",
      "PipeUniV2Balancer(address,uint256,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_FromUniswapPoolAddress),
        ethereum.Value.fromUnsignedBigInt(_IncomingLPT),
        ethereum.Value.fromAddress(_ToBalancerPoolAddress),
        ethereum.Value.fromAddress(_toWhomToIssue),
        ethereum.Value.fromUnsignedBigInt(_minBPTokens)
      ]
    );

    return result[0].toBigInt();
  }

  try_PipeUniV2Balancer(
    _FromUniswapPoolAddress: Address,
    _IncomingLPT: BigInt,
    _ToBalancerPoolAddress: Address,
    _toWhomToIssue: Address,
    _minBPTokens: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PipeUniV2Balancer",
      "PipeUniV2Balancer(address,uint256,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_FromUniswapPoolAddress),
        ethereum.Value.fromUnsignedBigInt(_IncomingLPT),
        ethereum.Value.fromAddress(_ToBalancerPoolAddress),
        ethereum.Value.fromAddress(_toWhomToIssue),
        ethereum.Value.fromUnsignedBigInt(_minBPTokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balancerUnZap(): Address {
    let result = super.call("balancerUnZap", "balancerUnZap():(address)", []);

    return result[0].toAddress();
  }

  try_balancerUnZap(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "balancerUnZap",
      "balancerUnZap():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balancerZapIn(): Address {
    let result = super.call("balancerZapIn", "balancerZapIn():(address)", []);

    return result[0].toAddress();
  }

  try_balancerZapIn(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "balancerZapIn",
      "balancerZapIn():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  uniUnZap(): Address {
    let result = super.call("uniUnZap", "uniUnZap():(address)", []);

    return result[0].toAddress();
  }

  try_uniUnZap(): ethereum.CallResult<Address> {
    let result = super.tryCall("uniUnZap", "uniUnZap():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  uniZapIn(): Address {
    let result = super.call("uniZapIn", "uniZapIn():(address)", []);

    return result[0].toAddress();
  }

  try_uniZapIn(): ethereum.CallResult<Address> {
    let result = super.tryCall("uniZapIn", "uniZapIn():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _balancerZapIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _balancerUnZap(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _uniZapIn(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _uniUnZap(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class PipeBalancerUniV2Call extends ethereum.Call {
  get inputs(): PipeBalancerUniV2Call__Inputs {
    return new PipeBalancerUniV2Call__Inputs(this);
  }

  get outputs(): PipeBalancerUniV2Call__Outputs {
    return new PipeBalancerUniV2Call__Outputs(this);
  }
}

export class PipeBalancerUniV2Call__Inputs {
  _call: PipeBalancerUniV2Call;

  constructor(call: PipeBalancerUniV2Call) {
    this._call = call;
  }

  get _FromBalancerPoolAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _IncomingBPT(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _toUniswapPoolAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _toWhomToIssue(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _minUniV2Tokens(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class PipeBalancerUniV2Call__Outputs {
  _call: PipeBalancerUniV2Call;

  constructor(call: PipeBalancerUniV2Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PipeUniV2BalancerCall extends ethereum.Call {
  get inputs(): PipeUniV2BalancerCall__Inputs {
    return new PipeUniV2BalancerCall__Inputs(this);
  }

  get outputs(): PipeUniV2BalancerCall__Outputs {
    return new PipeUniV2BalancerCall__Outputs(this);
  }
}

export class PipeUniV2BalancerCall__Inputs {
  _call: PipeUniV2BalancerCall;

  constructor(call: PipeUniV2BalancerCall) {
    this._call = call;
  }

  get _FromUniswapPoolAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _IncomingLPT(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _ToBalancerPoolAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _toWhomToIssue(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _minBPTokens(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class PipeUniV2BalancerCall__Outputs {
  _call: PipeUniV2BalancerCall;

  constructor(call: PipeUniV2BalancerCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InCaseTokengetsStuckCall extends ethereum.Call {
  get inputs(): InCaseTokengetsStuckCall__Inputs {
    return new InCaseTokengetsStuckCall__Inputs(this);
  }

  get outputs(): InCaseTokengetsStuckCall__Outputs {
    return new InCaseTokengetsStuckCall__Outputs(this);
  }
}

export class InCaseTokengetsStuckCall__Inputs {
  _call: InCaseTokengetsStuckCall;

  constructor(call: InCaseTokengetsStuckCall) {
    this._call = call;
  }

  get _TokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InCaseTokengetsStuckCall__Outputs {
  _call: InCaseTokengetsStuckCall;

  constructor(call: InCaseTokengetsStuckCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ToggleContractActiveCall extends ethereum.Call {
  get inputs(): ToggleContractActiveCall__Inputs {
    return new ToggleContractActiveCall__Inputs(this);
  }

  get outputs(): ToggleContractActiveCall__Outputs {
    return new ToggleContractActiveCall__Outputs(this);
  }
}

export class ToggleContractActiveCall__Inputs {
  _call: ToggleContractActiveCall;

  constructor(call: ToggleContractActiveCall) {
    this._call = call;
  }
}

export class ToggleContractActiveCall__Outputs {
  _call: ToggleContractActiveCall;

  constructor(call: ToggleContractActiveCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateZapAddressesCall extends ethereum.Call {
  get inputs(): UpdateZapAddressesCall__Inputs {
    return new UpdateZapAddressesCall__Inputs(this);
  }

  get outputs(): UpdateZapAddressesCall__Outputs {
    return new UpdateZapAddressesCall__Outputs(this);
  }
}

export class UpdateZapAddressesCall__Inputs {
  _call: UpdateZapAddressesCall;

  constructor(call: UpdateZapAddressesCall) {
    this._call = call;
  }

  get _balancerUnZap(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _uniZapIn(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _balancerZapIn(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _uniUnZap(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class UpdateZapAddressesCall__Outputs {
  _call: UpdateZapAddressesCall;

  constructor(call: UpdateZapAddressesCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
