// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class UniswapV2ZapOutGeneralV2ZapOut extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV2ZapOutGeneralV2ZapOut entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV2ZapOutGeneralV2ZapOut entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV2ZapOutGeneralV2ZapOut", id.toString(), this);
  }

  static load(id: string): UniswapV2ZapOutGeneralV2ZapOut | null {
    return store.get(
      "UniswapV2ZapOutGeneralV2ZapOut",
      id
    ) as UniswapV2ZapOutGeneralV2ZapOut | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _ToTokenContractAddress(): Bytes {
    let value = this.get("_ToTokenContractAddress");
    return value.toBytes();
  }

  set _ToTokenContractAddress(value: Bytes) {
    this.set("_ToTokenContractAddress", Value.fromBytes(value));
  }

  get _FromUniPoolAddress(): Bytes {
    let value = this.get("_FromUniPoolAddress");
    return value.toBytes();
  }

  set _FromUniPoolAddress(value: Bytes) {
    this.set("_FromUniPoolAddress", Value.fromBytes(value));
  }

  get _IncomingLP(): BigInt {
    let value = this.get("_IncomingLP");
    return value.toBigInt();
  }

  set _IncomingLP(value: BigInt) {
    this.set("_IncomingLP", Value.fromBigInt(value));
  }

  get _minTokensRec(): BigInt {
    let value = this.get("_minTokensRec");
    return value.toBigInt();
  }

  set _minTokensRec(value: BigInt) {
    this.set("_minTokensRec", Value.fromBigInt(value));
  }

  get value0(): BigInt {
    let value = this.get("value0");
    return value.toBigInt();
  }

  set value0(value: BigInt) {
    this.set("value0", Value.fromBigInt(value));
  }
}

export class UniswapV2ZapOutGeneralV2ZapOut2PairToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV2ZapOutGeneralV2ZapOut2PairToken entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV2ZapOutGeneralV2ZapOut2PairToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV2ZapOutGeneralV2ZapOut2PairToken", id.toString(), this);
  }

  static load(id: string): UniswapV2ZapOutGeneralV2ZapOut2PairToken | null {
    return store.get(
      "UniswapV2ZapOutGeneralV2ZapOut2PairToken",
      id
    ) as UniswapV2ZapOutGeneralV2ZapOut2PairToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _FromUniPoolAddress(): Bytes {
    let value = this.get("_FromUniPoolAddress");
    return value.toBytes();
  }

  set _FromUniPoolAddress(value: Bytes) {
    this.set("_FromUniPoolAddress", Value.fromBytes(value));
  }

  get _IncomingLP(): BigInt {
    let value = this.get("_IncomingLP");
    return value.toBigInt();
  }

  set _IncomingLP(value: BigInt) {
    this.set("_IncomingLP", Value.fromBigInt(value));
  }

  get amountA(): BigInt {
    let value = this.get("amountA");
    return value.toBigInt();
  }

  set amountA(value: BigInt) {
    this.set("amountA", Value.fromBigInt(value));
  }

  get amountB(): BigInt {
    let value = this.get("amountB");
    return value.toBigInt();
  }

  set amountB(value: BigInt) {
    this.set("amountB", Value.fromBigInt(value));
  }
}

export class UniswapV2ZapOutGeneralV2inCaseTokengetsStuck extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV2ZapOutGeneralV2inCaseTokengetsStuck entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV2ZapOutGeneralV2inCaseTokengetsStuck entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "UniswapV2ZapOutGeneralV2inCaseTokengetsStuck",
      id.toString(),
      this
    );
  }

  static load(id: string): UniswapV2ZapOutGeneralV2inCaseTokengetsStuck | null {
    return store.get(
      "UniswapV2ZapOutGeneralV2inCaseTokengetsStuck",
      id
    ) as UniswapV2ZapOutGeneralV2inCaseTokengetsStuck | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _TokenAddress(): Bytes {
    let value = this.get("_TokenAddress");
    return value.toBytes();
  }

  set _TokenAddress(value: Bytes) {
    this.set("_TokenAddress", Value.fromBytes(value));
  }
}

export class UniswapV2ZapOutGeneralV2renounceOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV2ZapOutGeneralV2renounceOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV2ZapOutGeneralV2renounceOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV2ZapOutGeneralV2renounceOwnership", id.toString(), this);
  }

  static load(id: string): UniswapV2ZapOutGeneralV2renounceOwnership | null {
    return store.get(
      "UniswapV2ZapOutGeneralV2renounceOwnership",
      id
    ) as UniswapV2ZapOutGeneralV2renounceOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UniswapV2ZapOutGeneralV2setnewdzgoodwillAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV2ZapOutGeneralV2setnewdzgoodwillAddress entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV2ZapOutGeneralV2setnewdzgoodwillAddress entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "UniswapV2ZapOutGeneralV2setnewdzgoodwillAddress",
      id.toString(),
      this
    );
  }

  static load(
    id: string
  ): UniswapV2ZapOutGeneralV2setnewdzgoodwillAddress | null {
    return store.get(
      "UniswapV2ZapOutGeneralV2setnewdzgoodwillAddress",
      id
    ) as UniswapV2ZapOutGeneralV2setnewdzgoodwillAddress | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _new_dzgoodwillAddress(): Bytes {
    let value = this.get("_new_dzgoodwillAddress");
    return value.toBytes();
  }

  set _new_dzgoodwillAddress(value: Bytes) {
    this.set("_new_dzgoodwillAddress", Value.fromBytes(value));
  }
}

export class UniswapV2ZapOutGeneralV2setnewgoodwill extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV2ZapOutGeneralV2setnewgoodwill entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV2ZapOutGeneralV2setnewgoodwill entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV2ZapOutGeneralV2setnewgoodwill", id.toString(), this);
  }

  static load(id: string): UniswapV2ZapOutGeneralV2setnewgoodwill | null {
    return store.get(
      "UniswapV2ZapOutGeneralV2setnewgoodwill",
      id
    ) as UniswapV2ZapOutGeneralV2setnewgoodwill | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _new_goodwill(): i32 {
    let value = this.get("_new_goodwill");
    return value.toI32();
  }

  set _new_goodwill(value: i32) {
    this.set("_new_goodwill", Value.fromI32(value));
  }
}

export class UniswapV2ZapOutGeneralV2toggleContractActive extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV2ZapOutGeneralV2toggleContractActive entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV2ZapOutGeneralV2toggleContractActive entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "UniswapV2ZapOutGeneralV2toggleContractActive",
      id.toString(),
      this
    );
  }

  static load(id: string): UniswapV2ZapOutGeneralV2toggleContractActive | null {
    return store.get(
      "UniswapV2ZapOutGeneralV2toggleContractActive",
      id
    ) as UniswapV2ZapOutGeneralV2toggleContractActive | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UniswapV2ZapOutGeneralV2transferOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV2ZapOutGeneralV2transferOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV2ZapOutGeneralV2transferOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV2ZapOutGeneralV2transferOwnership", id.toString(), this);
  }

  static load(id: string): UniswapV2ZapOutGeneralV2transferOwnership | null {
    return store.get(
      "UniswapV2ZapOutGeneralV2transferOwnership",
      id
    ) as UniswapV2ZapOutGeneralV2transferOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class UniswapV2ZapOutGeneralV2withdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV2ZapOutGeneralV2withdraw entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV2ZapOutGeneralV2withdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV2ZapOutGeneralV2withdraw", id.toString(), this);
  }

  static load(id: string): UniswapV2ZapOutGeneralV2withdraw | null {
    return store.get(
      "UniswapV2ZapOutGeneralV2withdraw",
      id
    ) as UniswapV2ZapOutGeneralV2withdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CurveZapInGeneralV14ZapIn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveZapInGeneralV14ZapIn entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveZapInGeneralV14ZapIn entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveZapInGeneralV14ZapIn", id.toString(), this);
  }

  static load(id: string): CurveZapInGeneralV14ZapIn | null {
    return store.get(
      "CurveZapInGeneralV14ZapIn",
      id
    ) as CurveZapInGeneralV14ZapIn | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _toWhomToIssue(): Bytes {
    let value = this.get("_toWhomToIssue");
    return value.toBytes();
  }

  set _toWhomToIssue(value: Bytes) {
    this.set("_toWhomToIssue", Value.fromBytes(value));
  }

  get _IncomingTokenAddress(): Bytes {
    let value = this.get("_IncomingTokenAddress");
    return value.toBytes();
  }

  set _IncomingTokenAddress(value: Bytes) {
    this.set("_IncomingTokenAddress", Value.fromBytes(value));
  }

  get _curvePoolExchangeAddress(): Bytes {
    let value = this.get("_curvePoolExchangeAddress");
    return value.toBytes();
  }

  set _curvePoolExchangeAddress(value: Bytes) {
    this.set("_curvePoolExchangeAddress", Value.fromBytes(value));
  }

  get _IncomingTokenQty(): BigInt {
    let value = this.get("_IncomingTokenQty");
    return value.toBigInt();
  }

  set _IncomingTokenQty(value: BigInt) {
    this.set("_IncomingTokenQty", Value.fromBigInt(value));
  }

  get _minPoolTokens(): BigInt {
    let value = this.get("_minPoolTokens");
    return value.toBigInt();
  }

  set _minPoolTokens(value: BigInt) {
    this.set("_minPoolTokens", Value.fromBigInt(value));
  }

  get crvTokensBought(): BigInt {
    let value = this.get("crvTokensBought");
    return value.toBigInt();
  }

  set crvTokensBought(value: BigInt) {
    this.set("crvTokensBought", Value.fromBigInt(value));
  }
}

export class CurveZapInGeneralV14approveToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveZapInGeneralV14approveToken entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveZapInGeneralV14approveToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveZapInGeneralV14approveToken", id.toString(), this);
  }

  static load(id: string): CurveZapInGeneralV14approveToken | null {
    return store.get(
      "CurveZapInGeneralV14approveToken",
      id
    ) as CurveZapInGeneralV14approveToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CurveZapInGeneralV14inCaseTokengetsStuck extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveZapInGeneralV14inCaseTokengetsStuck entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveZapInGeneralV14inCaseTokengetsStuck entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveZapInGeneralV14inCaseTokengetsStuck", id.toString(), this);
  }

  static load(id: string): CurveZapInGeneralV14inCaseTokengetsStuck | null {
    return store.get(
      "CurveZapInGeneralV14inCaseTokengetsStuck",
      id
    ) as CurveZapInGeneralV14inCaseTokengetsStuck | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _TokenAddress(): Bytes {
    let value = this.get("_TokenAddress");
    return value.toBytes();
  }

  set _TokenAddress(value: Bytes) {
    this.set("_TokenAddress", Value.fromBytes(value));
  }
}

export class CurveZapInGeneralV14renounceOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveZapInGeneralV14renounceOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveZapInGeneralV14renounceOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveZapInGeneralV14renounceOwnership", id.toString(), this);
  }

  static load(id: string): CurveZapInGeneralV14renounceOwnership | null {
    return store.get(
      "CurveZapInGeneralV14renounceOwnership",
      id
    ) as CurveZapInGeneralV14renounceOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CurveZapInGeneralV14setnewdzgoodwillAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveZapInGeneralV14setnewdzgoodwillAddress entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveZapInGeneralV14setnewdzgoodwillAddress entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "CurveZapInGeneralV14setnewdzgoodwillAddress",
      id.toString(),
      this
    );
  }

  static load(id: string): CurveZapInGeneralV14setnewdzgoodwillAddress | null {
    return store.get(
      "CurveZapInGeneralV14setnewdzgoodwillAddress",
      id
    ) as CurveZapInGeneralV14setnewdzgoodwillAddress | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _new_dzgoodwillAddress(): Bytes {
    let value = this.get("_new_dzgoodwillAddress");
    return value.toBytes();
  }

  set _new_dzgoodwillAddress(value: Bytes) {
    this.set("_new_dzgoodwillAddress", Value.fromBytes(value));
  }
}

export class CurveZapInGeneralV14setnewgoodwill extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveZapInGeneralV14setnewgoodwill entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveZapInGeneralV14setnewgoodwill entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveZapInGeneralV14setnewgoodwill", id.toString(), this);
  }

  static load(id: string): CurveZapInGeneralV14setnewgoodwill | null {
    return store.get(
      "CurveZapInGeneralV14setnewgoodwill",
      id
    ) as CurveZapInGeneralV14setnewgoodwill | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _new_goodwill(): i32 {
    let value = this.get("_new_goodwill");
    return value.toI32();
  }

  set _new_goodwill(value: i32) {
    this.set("_new_goodwill", Value.fromI32(value));
  }
}

export class CurveZapInGeneralV14toggleContractActive extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveZapInGeneralV14toggleContractActive entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveZapInGeneralV14toggleContractActive entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveZapInGeneralV14toggleContractActive", id.toString(), this);
  }

  static load(id: string): CurveZapInGeneralV14toggleContractActive | null {
    return store.get(
      "CurveZapInGeneralV14toggleContractActive",
      id
    ) as CurveZapInGeneralV14toggleContractActive | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CurveZapInGeneralV14transferOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveZapInGeneralV14transferOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveZapInGeneralV14transferOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveZapInGeneralV14transferOwnership", id.toString(), this);
  }

  static load(id: string): CurveZapInGeneralV14transferOwnership | null {
    return store.get(
      "CurveZapInGeneralV14transferOwnership",
      id
    ) as CurveZapInGeneralV14transferOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class CurveZapInGeneralV14withdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveZapInGeneralV14withdraw entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveZapInGeneralV14withdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveZapInGeneralV14withdraw", id.toString(), this);
  }

  static load(id: string): CurveZapInGeneralV14withdraw | null {
    return store.get(
      "CurveZapInGeneralV14withdraw",
      id
    ) as CurveZapInGeneralV14withdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CurveGeneralZapOutV2ZapOut extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveGeneralZapOutV2ZapOut entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveGeneralZapOutV2ZapOut entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveGeneralZapOutV2ZapOut", id.toString(), this);
  }

  static load(id: string): CurveGeneralZapOutV2ZapOut | null {
    return store.get(
      "CurveGeneralZapOutV2ZapOut",
      id
    ) as CurveGeneralZapOutV2ZapOut | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _toWhomToIssue(): Bytes {
    let value = this.get("_toWhomToIssue");
    return value.toBytes();
  }

  set _toWhomToIssue(value: Bytes) {
    this.set("_toWhomToIssue", Value.fromBytes(value));
  }

  get _curveExchangeAddress(): Bytes {
    let value = this.get("_curveExchangeAddress");
    return value.toBytes();
  }

  set _curveExchangeAddress(value: Bytes) {
    this.set("_curveExchangeAddress", Value.fromBytes(value));
  }

  get _tokenCount(): BigInt {
    let value = this.get("_tokenCount");
    return value.toBigInt();
  }

  set _tokenCount(value: BigInt) {
    this.set("_tokenCount", Value.fromBigInt(value));
  }

  get _IncomingCRV(): BigInt {
    let value = this.get("_IncomingCRV");
    return value.toBigInt();
  }

  set _IncomingCRV(value: BigInt) {
    this.set("_IncomingCRV", Value.fromBigInt(value));
  }

  get _ToTokenAddress(): Bytes {
    let value = this.get("_ToTokenAddress");
    return value.toBytes();
  }

  set _ToTokenAddress(value: Bytes) {
    this.set("_ToTokenAddress", Value.fromBytes(value));
  }

  get _minToTokens(): BigInt {
    let value = this.get("_minToTokens");
    return value.toBigInt();
  }

  set _minToTokens(value: BigInt) {
    this.set("_minToTokens", Value.fromBigInt(value));
  }

  get ToTokensBought(): BigInt {
    let value = this.get("ToTokensBought");
    return value.toBigInt();
  }

  set ToTokensBought(value: BigInt) {
    this.set("ToTokensBought", Value.fromBigInt(value));
  }
}

export class CurveGeneralZapOutV2ZapoutToUnderlying extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveGeneralZapOutV2ZapoutToUnderlying entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveGeneralZapOutV2ZapoutToUnderlying entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveGeneralZapOutV2ZapoutToUnderlying", id.toString(), this);
  }

  static load(id: string): CurveGeneralZapOutV2ZapoutToUnderlying | null {
    return store.get(
      "CurveGeneralZapOutV2ZapoutToUnderlying",
      id
    ) as CurveGeneralZapOutV2ZapoutToUnderlying | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _toWhomToIssue(): Bytes {
    let value = this.get("_toWhomToIssue");
    return value.toBytes();
  }

  set _toWhomToIssue(value: Bytes) {
    this.set("_toWhomToIssue", Value.fromBytes(value));
  }

  get _curveExchangeAddress(): Bytes {
    let value = this.get("_curveExchangeAddress");
    return value.toBytes();
  }

  set _curveExchangeAddress(value: Bytes) {
    this.set("_curveExchangeAddress", Value.fromBytes(value));
  }

  get _IncomingCRV(): BigInt {
    let value = this.get("_IncomingCRV");
    return value.toBigInt();
  }

  set _IncomingCRV(value: BigInt) {
    this.set("_IncomingCRV", Value.fromBigInt(value));
  }

  get _tokenCount(): BigInt {
    let value = this.get("_tokenCount");
    return value.toBigInt();
  }

  set _tokenCount(value: BigInt) {
    this.set("_tokenCount", Value.fromBigInt(value));
  }
}

export class CurveGeneralZapOutV2token2Eth extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveGeneralZapOutV2token2Eth entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveGeneralZapOutV2token2Eth entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveGeneralZapOutV2token2Eth", id.toString(), this);
  }

  static load(id: string): CurveGeneralZapOutV2token2Eth | null {
    return store.get(
      "CurveGeneralZapOutV2token2Eth",
      id
    ) as CurveGeneralZapOutV2token2Eth | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _FromTokenContractAddress(): Bytes {
    let value = this.get("_FromTokenContractAddress");
    return value.toBytes();
  }

  set _FromTokenContractAddress(value: Bytes) {
    this.set("_FromTokenContractAddress", Value.fromBytes(value));
  }

  get tokens2Trade(): BigInt {
    let value = this.get("tokens2Trade");
    return value.toBigInt();
  }

  set tokens2Trade(value: BigInt) {
    this.set("tokens2Trade", Value.fromBigInt(value));
  }

  get _toWhomToIssue(): Bytes {
    let value = this.get("_toWhomToIssue");
    return value.toBytes();
  }

  set _toWhomToIssue(value: Bytes) {
    this.set("_toWhomToIssue", Value.fromBytes(value));
  }

  get value0(): BigInt {
    let value = this.get("value0");
    return value.toBigInt();
  }

  set value0(value: BigInt) {
    this.set("value0", Value.fromBigInt(value));
  }
}

export class CurveGeneralZapOutV2token2Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveGeneralZapOutV2token2Token entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveGeneralZapOutV2token2Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveGeneralZapOutV2token2Token", id.toString(), this);
  }

  static load(id: string): CurveGeneralZapOutV2token2Token | null {
    return store.get(
      "CurveGeneralZapOutV2token2Token",
      id
    ) as CurveGeneralZapOutV2token2Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _FromTokenContractAddress(): Bytes {
    let value = this.get("_FromTokenContractAddress");
    return value.toBytes();
  }

  set _FromTokenContractAddress(value: Bytes) {
    this.set("_FromTokenContractAddress", Value.fromBytes(value));
  }

  get _ToWhomToIssue(): Bytes {
    let value = this.get("_ToWhomToIssue");
    return value.toBytes();
  }

  set _ToWhomToIssue(value: Bytes) {
    this.set("_ToWhomToIssue", Value.fromBytes(value));
  }

  get _ToTokenContractAddress(): Bytes {
    let value = this.get("_ToTokenContractAddress");
    return value.toBytes();
  }

  set _ToTokenContractAddress(value: Bytes) {
    this.set("_ToTokenContractAddress", Value.fromBytes(value));
  }

  get tokens2Trade(): BigInt {
    let value = this.get("tokens2Trade");
    return value.toBigInt();
  }

  set tokens2Trade(value: BigInt) {
    this.set("tokens2Trade", Value.fromBigInt(value));
  }

  get tokenBought(): BigInt {
    let value = this.get("tokenBought");
    return value.toBigInt();
  }

  set tokenBought(value: BigInt) {
    this.set("tokenBought", Value.fromBigInt(value));
  }
}

export class CurveGeneralZapOutV2addCRVToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveGeneralZapOutV2addCRVToken entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveGeneralZapOutV2addCRVToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveGeneralZapOutV2addCRVToken", id.toString(), this);
  }

  static load(id: string): CurveGeneralZapOutV2addCRVToken | null {
    return store.get(
      "CurveGeneralZapOutV2addCRVToken",
      id
    ) as CurveGeneralZapOutV2addCRVToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _exchangeAddress(): Bytes {
    let value = this.get("_exchangeAddress");
    return value.toBytes();
  }

  set _exchangeAddress(value: Bytes) {
    this.set("_exchangeAddress", Value.fromBytes(value));
  }

  get _crvTokenAddress(): Bytes {
    let value = this.get("_crvTokenAddress");
    return value.toBytes();
  }

  set _crvTokenAddress(value: Bytes) {
    this.set("_crvTokenAddress", Value.fromBytes(value));
  }
}

export class CurveGeneralZapOutV2addCToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveGeneralZapOutV2addCToken entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveGeneralZapOutV2addCToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveGeneralZapOutV2addCToken", id.toString(), this);
  }

  static load(id: string): CurveGeneralZapOutV2addCToken | null {
    return store.get(
      "CurveGeneralZapOutV2addCToken",
      id
    ) as CurveGeneralZapOutV2addCToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _cToken(): Bytes {
    let value = this.get("_cToken");
    return value.toBytes();
  }

  set _cToken(value: Bytes) {
    this.set("_cToken", Value.fromBytes(value));
  }

  get _underlyingToken(): Bytes {
    let value = this.get("_underlyingToken");
    return value.toBytes();
  }

  set _underlyingToken(value: Bytes) {
    this.set("_underlyingToken", Value.fromBytes(value));
  }
}

export class CurveGeneralZapOutV2addYToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveGeneralZapOutV2addYToken entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveGeneralZapOutV2addYToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveGeneralZapOutV2addYToken", id.toString(), this);
  }

  static load(id: string): CurveGeneralZapOutV2addYToken | null {
    return store.get(
      "CurveGeneralZapOutV2addYToken",
      id
    ) as CurveGeneralZapOutV2addYToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _yToken(): Bytes {
    let value = this.get("_yToken");
    return value.toBytes();
  }

  set _yToken(value: Bytes) {
    this.set("_yToken", Value.fromBytes(value));
  }

  get _underlyingToken(): Bytes {
    let value = this.get("_underlyingToken");
    return value.toBytes();
  }

  set _underlyingToken(value: Bytes) {
    this.set("_underlyingToken", Value.fromBytes(value));
  }
}

export class CurveGeneralZapOutV2approveToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveGeneralZapOutV2approveToken entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveGeneralZapOutV2approveToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveGeneralZapOutV2approveToken", id.toString(), this);
  }

  static load(id: string): CurveGeneralZapOutV2approveToken | null {
    return store.get(
      "CurveGeneralZapOutV2approveToken",
      id
    ) as CurveGeneralZapOutV2approveToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CurveGeneralZapOutV2inCaseTokengetsStuck extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveGeneralZapOutV2inCaseTokengetsStuck entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveGeneralZapOutV2inCaseTokengetsStuck entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveGeneralZapOutV2inCaseTokengetsStuck", id.toString(), this);
  }

  static load(id: string): CurveGeneralZapOutV2inCaseTokengetsStuck | null {
    return store.get(
      "CurveGeneralZapOutV2inCaseTokengetsStuck",
      id
    ) as CurveGeneralZapOutV2inCaseTokengetsStuck | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _TokenAddress(): Bytes {
    let value = this.get("_TokenAddress");
    return value.toBytes();
  }

  set _TokenAddress(value: Bytes) {
    this.set("_TokenAddress", Value.fromBytes(value));
  }
}

export class CurveGeneralZapOutV2renounceOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveGeneralZapOutV2renounceOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveGeneralZapOutV2renounceOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveGeneralZapOutV2renounceOwnership", id.toString(), this);
  }

  static load(id: string): CurveGeneralZapOutV2renounceOwnership | null {
    return store.get(
      "CurveGeneralZapOutV2renounceOwnership",
      id
    ) as CurveGeneralZapOutV2renounceOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CurveGeneralZapOutV2setCRVTokenAddresses extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveGeneralZapOutV2setCRVTokenAddresses entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveGeneralZapOutV2setCRVTokenAddresses entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveGeneralZapOutV2setCRVTokenAddresses", id.toString(), this);
  }

  static load(id: string): CurveGeneralZapOutV2setCRVTokenAddresses | null {
    return store.get(
      "CurveGeneralZapOutV2setCRVTokenAddresses",
      id
    ) as CurveGeneralZapOutV2setCRVTokenAddresses | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CurveGeneralZapOutV2setnewdzgoodwillAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveGeneralZapOutV2setnewdzgoodwillAddress entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveGeneralZapOutV2setnewdzgoodwillAddress entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "CurveGeneralZapOutV2setnewdzgoodwillAddress",
      id.toString(),
      this
    );
  }

  static load(id: string): CurveGeneralZapOutV2setnewdzgoodwillAddress | null {
    return store.get(
      "CurveGeneralZapOutV2setnewdzgoodwillAddress",
      id
    ) as CurveGeneralZapOutV2setnewdzgoodwillAddress | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _new_dzgoodwillAddress(): Bytes {
    let value = this.get("_new_dzgoodwillAddress");
    return value.toBytes();
  }

  set _new_dzgoodwillAddress(value: Bytes) {
    this.set("_new_dzgoodwillAddress", Value.fromBytes(value));
  }
}

export class CurveGeneralZapOutV2setnewgoodwill extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveGeneralZapOutV2setnewgoodwill entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveGeneralZapOutV2setnewgoodwill entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveGeneralZapOutV2setnewgoodwill", id.toString(), this);
  }

  static load(id: string): CurveGeneralZapOutV2setnewgoodwill | null {
    return store.get(
      "CurveGeneralZapOutV2setnewgoodwill",
      id
    ) as CurveGeneralZapOutV2setnewgoodwill | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _new_goodwill(): i32 {
    let value = this.get("_new_goodwill");
    return value.toI32();
  }

  set _new_goodwill(value: i32) {
    this.set("_new_goodwill", Value.fromI32(value));
  }
}

export class CurveGeneralZapOutV2setnewsUSDTokenAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveGeneralZapOutV2setnewsUSDTokenAddress entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveGeneralZapOutV2setnewsUSDTokenAddress entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "CurveGeneralZapOutV2setnewsUSDTokenAddress",
      id.toString(),
      this
    );
  }

  static load(id: string): CurveGeneralZapOutV2setnewsUSDTokenAddress | null {
    return store.get(
      "CurveGeneralZapOutV2setnewsUSDTokenAddress",
      id
    ) as CurveGeneralZapOutV2setnewsUSDTokenAddress | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _new_sUSDTokenAddress(): Bytes {
    let value = this.get("_new_sUSDTokenAddress");
    return value.toBytes();
  }

  set _new_sUSDTokenAddress(value: Bytes) {
    this.set("_new_sUSDTokenAddress", Value.fromBytes(value));
  }
}

export class CurveGeneralZapOutV2setcTokens extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveGeneralZapOutV2setcTokens entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveGeneralZapOutV2setcTokens entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveGeneralZapOutV2setcTokens", id.toString(), this);
  }

  static load(id: string): CurveGeneralZapOutV2setcTokens | null {
    return store.get(
      "CurveGeneralZapOutV2setcTokens",
      id
    ) as CurveGeneralZapOutV2setcTokens | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CurveGeneralZapOutV2setyTokens extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveGeneralZapOutV2setyTokens entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveGeneralZapOutV2setyTokens entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveGeneralZapOutV2setyTokens", id.toString(), this);
  }

  static load(id: string): CurveGeneralZapOutV2setyTokens | null {
    return store.get(
      "CurveGeneralZapOutV2setyTokens",
      id
    ) as CurveGeneralZapOutV2setyTokens | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CurveGeneralZapOutV2toggleContractActive extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveGeneralZapOutV2toggleContractActive entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveGeneralZapOutV2toggleContractActive entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveGeneralZapOutV2toggleContractActive", id.toString(), this);
  }

  static load(id: string): CurveGeneralZapOutV2toggleContractActive | null {
    return store.get(
      "CurveGeneralZapOutV2toggleContractActive",
      id
    ) as CurveGeneralZapOutV2toggleContractActive | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CurveGeneralZapOutV2transferOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveGeneralZapOutV2transferOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveGeneralZapOutV2transferOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveGeneralZapOutV2transferOwnership", id.toString(), this);
  }

  static load(id: string): CurveGeneralZapOutV2transferOwnership | null {
    return store.get(
      "CurveGeneralZapOutV2transferOwnership",
      id
    ) as CurveGeneralZapOutV2transferOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class CurveGeneralZapOutV2withdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurveGeneralZapOutV2withdraw entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurveGeneralZapOutV2withdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurveGeneralZapOutV2withdraw", id.toString(), this);
  }

  static load(id: string): CurveGeneralZapOutV2withdraw | null {
    return store.get(
      "CurveGeneralZapOutV2withdraw",
      id
    ) as CurveGeneralZapOutV2withdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class BalancerZapOutGeneralV2EasyZapOut extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerZapOutGeneralV2EasyZapOut entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerZapOutGeneralV2EasyZapOut entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BalancerZapOutGeneralV2EasyZapOut", id.toString(), this);
  }

  static load(id: string): BalancerZapOutGeneralV2EasyZapOut | null {
    return store.get(
      "BalancerZapOutGeneralV2EasyZapOut",
      id
    ) as BalancerZapOutGeneralV2EasyZapOut | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _ToTokenContractAddress(): Bytes {
    let value = this.get("_ToTokenContractAddress");
    return value.toBytes();
  }

  set _ToTokenContractAddress(value: Bytes) {
    this.set("_ToTokenContractAddress", Value.fromBytes(value));
  }

  get _FromBalancerPoolAddress(): Bytes {
    let value = this.get("_FromBalancerPoolAddress");
    return value.toBytes();
  }

  set _FromBalancerPoolAddress(value: Bytes) {
    this.set("_FromBalancerPoolAddress", Value.fromBytes(value));
  }

  get _IncomingBPT(): BigInt {
    let value = this.get("_IncomingBPT");
    return value.toBigInt();
  }

  set _IncomingBPT(value: BigInt) {
    this.set("_IncomingBPT", Value.fromBigInt(value));
  }

  get _minTokensRec(): BigInt {
    let value = this.get("_minTokensRec");
    return value.toBigInt();
  }

  set _minTokensRec(value: BigInt) {
    this.set("_minTokensRec", Value.fromBigInt(value));
  }

  get value0(): BigInt {
    let value = this.get("value0");
    return value.toBigInt();
  }

  set value0(value: BigInt) {
    this.set("value0", Value.fromBigInt(value));
  }
}

export class BalancerZapOutGeneralV2ZapOut extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerZapOutGeneralV2ZapOut entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerZapOutGeneralV2ZapOut entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BalancerZapOutGeneralV2ZapOut", id.toString(), this);
  }

  static load(id: string): BalancerZapOutGeneralV2ZapOut | null {
    return store.get(
      "BalancerZapOutGeneralV2ZapOut",
      id
    ) as BalancerZapOutGeneralV2ZapOut | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _toWhomToIssue(): Bytes {
    let value = this.get("_toWhomToIssue");
    return value.toBytes();
  }

  set _toWhomToIssue(value: Bytes) {
    this.set("_toWhomToIssue", Value.fromBytes(value));
  }

  get _ToTokenContractAddress(): Bytes {
    let value = this.get("_ToTokenContractAddress");
    return value.toBytes();
  }

  set _ToTokenContractAddress(value: Bytes) {
    this.set("_ToTokenContractAddress", Value.fromBytes(value));
  }

  get _FromBalancerPoolAddress(): Bytes {
    let value = this.get("_FromBalancerPoolAddress");
    return value.toBytes();
  }

  set _FromBalancerPoolAddress(value: Bytes) {
    this.set("_FromBalancerPoolAddress", Value.fromBytes(value));
  }

  get _IncomingBPT(): BigInt {
    let value = this.get("_IncomingBPT");
    return value.toBigInt();
  }

  set _IncomingBPT(value: BigInt) {
    this.set("_IncomingBPT", Value.fromBigInt(value));
  }

  get _IntermediateToken(): Bytes {
    let value = this.get("_IntermediateToken");
    return value.toBytes();
  }

  set _IntermediateToken(value: Bytes) {
    this.set("_IntermediateToken", Value.fromBytes(value));
  }

  get _minTokensRec(): BigInt {
    let value = this.get("_minTokensRec");
    return value.toBigInt();
  }

  set _minTokensRec(value: BigInt) {
    this.set("_minTokensRec", Value.fromBigInt(value));
  }

  get value0(): BigInt {
    let value = this.get("value0");
    return value.toBigInt();
  }

  set value0(value: BigInt) {
    this.set("value0", Value.fromBigInt(value));
  }
}

export class BalancerZapOutGeneralV2inCaseTokengetsStuck extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerZapOutGeneralV2inCaseTokengetsStuck entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerZapOutGeneralV2inCaseTokengetsStuck entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "BalancerZapOutGeneralV2inCaseTokengetsStuck",
      id.toString(),
      this
    );
  }

  static load(id: string): BalancerZapOutGeneralV2inCaseTokengetsStuck | null {
    return store.get(
      "BalancerZapOutGeneralV2inCaseTokengetsStuck",
      id
    ) as BalancerZapOutGeneralV2inCaseTokengetsStuck | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _TokenAddress(): Bytes {
    let value = this.get("_TokenAddress");
    return value.toBytes();
  }

  set _TokenAddress(value: Bytes) {
    this.set("_TokenAddress", Value.fromBytes(value));
  }
}

export class BalancerZapOutGeneralV2renounceOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerZapOutGeneralV2renounceOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerZapOutGeneralV2renounceOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BalancerZapOutGeneralV2renounceOwnership", id.toString(), this);
  }

  static load(id: string): BalancerZapOutGeneralV2renounceOwnership | null {
    return store.get(
      "BalancerZapOutGeneralV2renounceOwnership",
      id
    ) as BalancerZapOutGeneralV2renounceOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class BalancerZapOutGeneralV2setnewdzgoodwillAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerZapOutGeneralV2setnewdzgoodwillAddress entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerZapOutGeneralV2setnewdzgoodwillAddress entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "BalancerZapOutGeneralV2setnewdzgoodwillAddress",
      id.toString(),
      this
    );
  }

  static load(
    id: string
  ): BalancerZapOutGeneralV2setnewdzgoodwillAddress | null {
    return store.get(
      "BalancerZapOutGeneralV2setnewdzgoodwillAddress",
      id
    ) as BalancerZapOutGeneralV2setnewdzgoodwillAddress | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _new_dzgoodwillAddress(): Bytes {
    let value = this.get("_new_dzgoodwillAddress");
    return value.toBytes();
  }

  set _new_dzgoodwillAddress(value: Bytes) {
    this.set("_new_dzgoodwillAddress", Value.fromBytes(value));
  }
}

export class BalancerZapOutGeneralV2setnewgoodwill extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerZapOutGeneralV2setnewgoodwill entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerZapOutGeneralV2setnewgoodwill entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BalancerZapOutGeneralV2setnewgoodwill", id.toString(), this);
  }

  static load(id: string): BalancerZapOutGeneralV2setnewgoodwill | null {
    return store.get(
      "BalancerZapOutGeneralV2setnewgoodwill",
      id
    ) as BalancerZapOutGeneralV2setnewgoodwill | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _new_goodwill(): i32 {
    let value = this.get("_new_goodwill");
    return value.toI32();
  }

  set _new_goodwill(value: i32) {
    this.set("_new_goodwill", Value.fromI32(value));
  }
}

export class BalancerZapOutGeneralV2toggleContractActive extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerZapOutGeneralV2toggleContractActive entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerZapOutGeneralV2toggleContractActive entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "BalancerZapOutGeneralV2toggleContractActive",
      id.toString(),
      this
    );
  }

  static load(id: string): BalancerZapOutGeneralV2toggleContractActive | null {
    return store.get(
      "BalancerZapOutGeneralV2toggleContractActive",
      id
    ) as BalancerZapOutGeneralV2toggleContractActive | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class BalancerZapOutGeneralV2transferOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerZapOutGeneralV2transferOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerZapOutGeneralV2transferOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BalancerZapOutGeneralV2transferOwnership", id.toString(), this);
  }

  static load(id: string): BalancerZapOutGeneralV2transferOwnership | null {
    return store.get(
      "BalancerZapOutGeneralV2transferOwnership",
      id
    ) as BalancerZapOutGeneralV2transferOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class BalancerZapOutGeneralV2withdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerZapOutGeneralV2withdraw entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerZapOutGeneralV2withdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BalancerZapOutGeneralV2withdraw", id.toString(), this);
  }

  static load(id: string): BalancerZapOutGeneralV2withdraw | null {
    return store.get(
      "BalancerZapOutGeneralV2withdraw",
      id
    ) as BalancerZapOutGeneralV2withdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UniswapV1ZapOutGeneralV2LetsWithdrawonlyERC extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV1ZapOutGeneralV2LetsWithdrawonlyERC entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV1ZapOutGeneralV2LetsWithdrawonlyERC entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "UniswapV1ZapOutGeneralV2LetsWithdrawonlyERC",
      id.toString(),
      this
    );
  }

  static load(id: string): UniswapV1ZapOutGeneralV2LetsWithdrawonlyERC | null {
    return store.get(
      "UniswapV1ZapOutGeneralV2LetsWithdrawonlyERC",
      id
    ) as UniswapV1ZapOutGeneralV2LetsWithdrawonlyERC | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _TokenContractAddress(): Bytes {
    let value = this.get("_TokenContractAddress");
    return value.toBytes();
  }

  set _TokenContractAddress(value: Bytes) {
    this.set("_TokenContractAddress", Value.fromBytes(value));
  }

  get LiquidityTokenSold(): BigInt {
    let value = this.get("LiquidityTokenSold");
    return value.toBigInt();
  }

  set LiquidityTokenSold(value: BigInt) {
    this.set("LiquidityTokenSold", Value.fromBigInt(value));
  }

  get _minTokensRec(): BigInt {
    let value = this.get("_minTokensRec");
    return value.toBigInt();
  }

  set _minTokensRec(value: BigInt) {
    this.set("_minTokensRec", Value.fromBigInt(value));
  }

  get _returnInDai(): boolean {
    let value = this.get("_returnInDai");
    return value.toBoolean();
  }

  set _returnInDai(value: boolean) {
    this.set("_returnInDai", Value.fromBoolean(value));
  }

  get value0(): boolean {
    let value = this.get("value0");
    return value.toBoolean();
  }

  set value0(value: boolean) {
    this.set("value0", Value.fromBoolean(value));
  }
}

export class UniswapV1ZapOutGeneralV2LetsWithdrawonlyETH extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV1ZapOutGeneralV2LetsWithdrawonlyETH entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV1ZapOutGeneralV2LetsWithdrawonlyETH entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "UniswapV1ZapOutGeneralV2LetsWithdrawonlyETH",
      id.toString(),
      this
    );
  }

  static load(id: string): UniswapV1ZapOutGeneralV2LetsWithdrawonlyETH | null {
    return store.get(
      "UniswapV1ZapOutGeneralV2LetsWithdrawonlyETH",
      id
    ) as UniswapV1ZapOutGeneralV2LetsWithdrawonlyETH | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _TokenContractAddress(): Bytes {
    let value = this.get("_TokenContractAddress");
    return value.toBytes();
  }

  set _TokenContractAddress(value: Bytes) {
    this.set("_TokenContractAddress", Value.fromBytes(value));
  }

  get LiquidityTokenSold(): BigInt {
    let value = this.get("LiquidityTokenSold");
    return value.toBigInt();
  }

  set LiquidityTokenSold(value: BigInt) {
    this.set("LiquidityTokenSold", Value.fromBigInt(value));
  }

  get _minEthRec(): BigInt {
    let value = this.get("_minEthRec");
    return value.toBigInt();
  }

  set _minEthRec(value: BigInt) {
    this.set("_minEthRec", Value.fromBigInt(value));
  }

  get value0(): boolean {
    let value = this.get("value0");
    return value.toBoolean();
  }

  set value0(value: boolean) {
    this.set("value0", Value.fromBoolean(value));
  }
}

export class UniswapV1ZapOutGeneralV2inCaseTokengetsStuck extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV1ZapOutGeneralV2inCaseTokengetsStuck entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV1ZapOutGeneralV2inCaseTokengetsStuck entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "UniswapV1ZapOutGeneralV2inCaseTokengetsStuck",
      id.toString(),
      this
    );
  }

  static load(id: string): UniswapV1ZapOutGeneralV2inCaseTokengetsStuck | null {
    return store.get(
      "UniswapV1ZapOutGeneralV2inCaseTokengetsStuck",
      id
    ) as UniswapV1ZapOutGeneralV2inCaseTokengetsStuck | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _TokenAddress(): Bytes {
    let value = this.get("_TokenAddress");
    return value.toBytes();
  }

  set _TokenAddress(value: Bytes) {
    this.set("_TokenAddress", Value.fromBytes(value));
  }
}

export class UniswapV1ZapOutGeneralV2renounceOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV1ZapOutGeneralV2renounceOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV1ZapOutGeneralV2renounceOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV1ZapOutGeneralV2renounceOwnership", id.toString(), this);
  }

  static load(id: string): UniswapV1ZapOutGeneralV2renounceOwnership | null {
    return store.get(
      "UniswapV1ZapOutGeneralV2renounceOwnership",
      id
    ) as UniswapV1ZapOutGeneralV2renounceOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UniswapV1ZapOutGeneralV2setnewgoodwill extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV1ZapOutGeneralV2setnewgoodwill entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV1ZapOutGeneralV2setnewgoodwill entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV1ZapOutGeneralV2setnewgoodwill", id.toString(), this);
  }

  static load(id: string): UniswapV1ZapOutGeneralV2setnewgoodwill | null {
    return store.get(
      "UniswapV1ZapOutGeneralV2setnewgoodwill",
      id
    ) as UniswapV1ZapOutGeneralV2setnewgoodwill | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _new_goodwill(): i32 {
    let value = this.get("_new_goodwill");
    return value.toI32();
  }

  set _new_goodwill(value: i32) {
    this.set("_new_goodwill", Value.fromI32(value));
  }
}

export class UniswapV1ZapOutGeneralV2toggleContractActive extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV1ZapOutGeneralV2toggleContractActive entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV1ZapOutGeneralV2toggleContractActive entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "UniswapV1ZapOutGeneralV2toggleContractActive",
      id.toString(),
      this
    );
  }

  static load(id: string): UniswapV1ZapOutGeneralV2toggleContractActive | null {
    return store.get(
      "UniswapV1ZapOutGeneralV2toggleContractActive",
      id
    ) as UniswapV1ZapOutGeneralV2toggleContractActive | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UniswapV1ZapOutGeneralV2transferOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV1ZapOutGeneralV2transferOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV1ZapOutGeneralV2transferOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV1ZapOutGeneralV2transferOwnership", id.toString(), this);
  }

  static load(id: string): UniswapV1ZapOutGeneralV2transferOwnership | null {
    return store.get(
      "UniswapV1ZapOutGeneralV2transferOwnership",
      id
    ) as UniswapV1ZapOutGeneralV2transferOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class UniswapV1ZapOutGeneralV2withdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV1ZapOutGeneralV2withdraw entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV1ZapOutGeneralV2withdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV1ZapOutGeneralV2withdraw", id.toString(), this);
  }

  static load(id: string): UniswapV1ZapOutGeneralV2withdraw | null {
    return store.get(
      "UniswapV1ZapOutGeneralV2withdraw",
      id
    ) as UniswapV1ZapOutGeneralV2withdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UniCurvePipeCurve2Uni extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniCurvePipeCurve2Uni entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniCurvePipeCurve2Uni entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniCurvePipeCurve2Uni", id.toString(), this);
  }

  static load(id: string): UniCurvePipeCurve2Uni | null {
    return store.get(
      "UniCurvePipeCurve2Uni",
      id
    ) as UniCurvePipeCurve2Uni | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _toWhomToIssue(): Bytes {
    let value = this.get("_toWhomToIssue");
    return value.toBytes();
  }

  set _toWhomToIssue(value: Bytes) {
    this.set("_toWhomToIssue", Value.fromBytes(value));
  }

  get _incomingCurveExchange(): Bytes {
    let value = this.get("_incomingCurveExchange");
    return value.toBytes();
  }

  set _incomingCurveExchange(value: Bytes) {
    this.set("_incomingCurveExchange", Value.fromBytes(value));
  }

  get _IncomingCRV(): BigInt {
    let value = this.get("_IncomingCRV");
    return value.toBigInt();
  }

  set _IncomingCRV(value: BigInt) {
    this.set("_IncomingCRV", Value.fromBigInt(value));
  }

  get _toUniUnderlyingTokenAddress(): Bytes {
    let value = this.get("_toUniUnderlyingTokenAddress");
    return value.toBytes();
  }

  set _toUniUnderlyingTokenAddress(value: Bytes) {
    this.set("_toUniUnderlyingTokenAddress", Value.fromBytes(value));
  }
}

export class UniCurvePipeUni2Curve extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniCurvePipeUni2Curve entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniCurvePipeUni2Curve entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniCurvePipeUni2Curve", id.toString(), this);
  }

  static load(id: string): UniCurvePipeUni2Curve | null {
    return store.get(
      "UniCurvePipeUni2Curve",
      id
    ) as UniCurvePipeUni2Curve | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _toWhomToIssue(): Bytes {
    let value = this.get("_toWhomToIssue");
    return value.toBytes();
  }

  set _toWhomToIssue(value: Bytes) {
    this.set("_toWhomToIssue", Value.fromBytes(value));
  }

  get _incomingUniUnderlyingTokenAddress(): Bytes {
    let value = this.get("_incomingUniUnderlyingTokenAddress");
    return value.toBytes();
  }

  set _incomingUniUnderlyingTokenAddress(value: Bytes) {
    this.set("_incomingUniUnderlyingTokenAddress", Value.fromBytes(value));
  }

  get _IncomingLPT(): BigInt {
    let value = this.get("_IncomingLPT");
    return value.toBigInt();
  }

  set _IncomingLPT(value: BigInt) {
    this.set("_IncomingLPT", Value.fromBigInt(value));
  }

  get _toCurveExchange(): Bytes {
    let value = this.get("_toCurveExchange");
    return value.toBytes();
  }

  set _toCurveExchange(value: Bytes) {
    this.set("_toCurveExchange", Value.fromBytes(value));
  }
}

export class UniCurvePipeapproveToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniCurvePipeapproveToken entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniCurvePipeapproveToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniCurvePipeapproveToken", id.toString(), this);
  }

  static load(id: string): UniCurvePipeapproveToken | null {
    return store.get(
      "UniCurvePipeapproveToken",
      id
    ) as UniCurvePipeapproveToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UniCurvePipedestruct extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniCurvePipedestruct entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniCurvePipedestruct entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniCurvePipedestruct", id.toString(), this);
  }

  static load(id: string): UniCurvePipedestruct | null {
    return store.get("UniCurvePipedestruct", id) as UniCurvePipedestruct | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UniCurvePipeinCaseTokengetsStuck extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniCurvePipeinCaseTokengetsStuck entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniCurvePipeinCaseTokengetsStuck entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniCurvePipeinCaseTokengetsStuck", id.toString(), this);
  }

  static load(id: string): UniCurvePipeinCaseTokengetsStuck | null {
    return store.get(
      "UniCurvePipeinCaseTokengetsStuck",
      id
    ) as UniCurvePipeinCaseTokengetsStuck | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _TokenAddress(): Bytes {
    let value = this.get("_TokenAddress");
    return value.toBytes();
  }

  set _TokenAddress(value: Bytes) {
    this.set("_TokenAddress", Value.fromBytes(value));
  }
}

export class UniCurvePiperenounceOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniCurvePiperenounceOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniCurvePiperenounceOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniCurvePiperenounceOwnership", id.toString(), this);
  }

  static load(id: string): UniCurvePiperenounceOwnership | null {
    return store.get(
      "UniCurvePiperenounceOwnership",
      id
    ) as UniCurvePiperenounceOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UniCurvePipetoggleContractActive extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniCurvePipetoggleContractActive entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniCurvePipetoggleContractActive entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniCurvePipetoggleContractActive", id.toString(), this);
  }

  static load(id: string): UniCurvePipetoggleContractActive | null {
    return store.get(
      "UniCurvePipetoggleContractActive",
      id
    ) as UniCurvePipetoggleContractActive | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UniCurvePipetransferOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniCurvePipetransferOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniCurvePipetransferOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniCurvePipetransferOwnership", id.toString(), this);
  }

  static load(id: string): UniCurvePipetransferOwnership | null {
    return store.get(
      "UniCurvePipetransferOwnership",
      id
    ) as UniCurvePipetransferOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class UniCurvePipewithdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniCurvePipewithdraw entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniCurvePipewithdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniCurvePipewithdraw", id.toString(), this);
  }

  static load(id: string): UniCurvePipewithdraw | null {
    return store.get("UniCurvePipewithdraw", id) as UniCurvePipewithdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UniV1V2PipeV1toV2Pipe extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniV1V2PipeV1toV2Pipe entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniV1V2PipeV1toV2Pipe entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniV1V2PipeV1toV2Pipe", id.toString(), this);
  }

  static load(id: string): UniV1V2PipeV1toV2Pipe | null {
    return store.get(
      "UniV1V2PipeV1toV2Pipe",
      id
    ) as UniV1V2PipeV1toV2Pipe | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get fromTokenAddress(): Bytes {
    let value = this.get("fromTokenAddress");
    return value.toBytes();
  }

  set fromTokenAddress(value: Bytes) {
    this.set("fromTokenAddress", Value.fromBytes(value));
  }

  get uniV1Amount(): BigInt {
    let value = this.get("uniV1Amount");
    return value.toBigInt();
  }

  set uniV1Amount(value: BigInt) {
    this.set("uniV1Amount", Value.fromBigInt(value));
  }

  get toTokenAddress(): Bytes {
    let value = this.get("toTokenAddress");
    return value.toBytes();
  }

  set toTokenAddress(value: Bytes) {
    this.set("toTokenAddress", Value.fromBytes(value));
  }

  get toWhomToIssue(): Bytes {
    let value = this.get("toWhomToIssue");
    return value.toBytes();
  }

  set toWhomToIssue(value: Bytes) {
    this.set("toWhomToIssue", Value.fromBytes(value));
  }

  get value0(): BigInt {
    let value = this.get("value0");
    return value.toBigInt();
  }

  set value0(value: BigInt) {
    this.set("value0", Value.fromBigInt(value));
  }
}

export class UniV1V2Pipedestruct extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UniV1V2Pipedestruct entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniV1V2Pipedestruct entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniV1V2Pipedestruct", id.toString(), this);
  }

  static load(id: string): UniV1V2Pipedestruct | null {
    return store.get("UniV1V2Pipedestruct", id) as UniV1V2Pipedestruct | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UniV1V2PipeinCaseTokengetsStuck extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniV1V2PipeinCaseTokengetsStuck entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniV1V2PipeinCaseTokengetsStuck entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniV1V2PipeinCaseTokengetsStuck", id.toString(), this);
  }

  static load(id: string): UniV1V2PipeinCaseTokengetsStuck | null {
    return store.get(
      "UniV1V2PipeinCaseTokengetsStuck",
      id
    ) as UniV1V2PipeinCaseTokengetsStuck | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _TokenAddress(): Bytes {
    let value = this.get("_TokenAddress");
    return value.toBytes();
  }

  set _TokenAddress(value: Bytes) {
    this.set("_TokenAddress", Value.fromBytes(value));
  }
}

export class UniV1V2PiperenounceOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniV1V2PiperenounceOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniV1V2PiperenounceOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniV1V2PiperenounceOwnership", id.toString(), this);
  }

  static load(id: string): UniV1V2PiperenounceOwnership | null {
    return store.get(
      "UniV1V2PiperenounceOwnership",
      id
    ) as UniV1V2PiperenounceOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UniV1V2PipesetnewdzgoodwillAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniV1V2PipesetnewdzgoodwillAddress entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniV1V2PipesetnewdzgoodwillAddress entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniV1V2PipesetnewdzgoodwillAddress", id.toString(), this);
  }

  static load(id: string): UniV1V2PipesetnewdzgoodwillAddress | null {
    return store.get(
      "UniV1V2PipesetnewdzgoodwillAddress",
      id
    ) as UniV1V2PipesetnewdzgoodwillAddress | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _new_dzgoodwillAddress(): Bytes {
    let value = this.get("_new_dzgoodwillAddress");
    return value.toBytes();
  }

  set _new_dzgoodwillAddress(value: Bytes) {
    this.set("_new_dzgoodwillAddress", Value.fromBytes(value));
  }
}

export class UniV1V2Pipesetnewgoodwill extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniV1V2Pipesetnewgoodwill entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniV1V2Pipesetnewgoodwill entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniV1V2Pipesetnewgoodwill", id.toString(), this);
  }

  static load(id: string): UniV1V2Pipesetnewgoodwill | null {
    return store.get(
      "UniV1V2Pipesetnewgoodwill",
      id
    ) as UniV1V2Pipesetnewgoodwill | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _new_goodwill(): i32 {
    let value = this.get("_new_goodwill");
    return value.toI32();
  }

  set _new_goodwill(value: i32) {
    this.set("_new_goodwill", Value.fromI32(value));
  }
}

export class UniV1V2PipetoggleContractActive extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniV1V2PipetoggleContractActive entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniV1V2PipetoggleContractActive entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniV1V2PipetoggleContractActive", id.toString(), this);
  }

  static load(id: string): UniV1V2PipetoggleContractActive | null {
    return store.get(
      "UniV1V2PipetoggleContractActive",
      id
    ) as UniV1V2PipetoggleContractActive | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UniV1V2PipetransferOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniV1V2PipetransferOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniV1V2PipetransferOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniV1V2PipetransferOwnership", id.toString(), this);
  }

  static load(id: string): UniV1V2PipetransferOwnership | null {
    return store.get(
      "UniV1V2PipetransferOwnership",
      id
    ) as UniV1V2PipetransferOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class UniV1V2Pipewithdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UniV1V2Pipewithdraw entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniV1V2Pipewithdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniV1V2Pipewithdraw", id.toString(), this);
  }

  static load(id: string): UniV1V2Pipewithdraw | null {
    return store.get("UniV1V2Pipewithdraw", id) as UniV1V2Pipewithdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UniswapV2ZapInGeneralV2ZapIn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV2ZapInGeneralV2ZapIn entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV2ZapInGeneralV2ZapIn entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV2ZapInGeneralV2ZapIn", id.toString(), this);
  }

  static load(id: string): UniswapV2ZapInGeneralV2ZapIn | null {
    return store.get(
      "UniswapV2ZapInGeneralV2ZapIn",
      id
    ) as UniswapV2ZapInGeneralV2ZapIn | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _FromTokenContractAddress(): Bytes {
    let value = this.get("_FromTokenContractAddress");
    return value.toBytes();
  }

  set _FromTokenContractAddress(value: Bytes) {
    this.set("_FromTokenContractAddress", Value.fromBytes(value));
  }

  get _ToUnipoolToken0(): Bytes {
    let value = this.get("_ToUnipoolToken0");
    return value.toBytes();
  }

  set _ToUnipoolToken0(value: Bytes) {
    this.set("_ToUnipoolToken0", Value.fromBytes(value));
  }

  get _ToUnipoolToken1(): Bytes {
    let value = this.get("_ToUnipoolToken1");
    return value.toBytes();
  }

  set _ToUnipoolToken1(value: Bytes) {
    this.set("_ToUnipoolToken1", Value.fromBytes(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }

  get _minPoolTokens(): BigInt {
    let value = this.get("_minPoolTokens");
    return value.toBigInt();
  }

  set _minPoolTokens(value: BigInt) {
    this.set("_minPoolTokens", Value.fromBigInt(value));
  }

  get value0(): BigInt {
    let value = this.get("value0");
    return value.toBigInt();
  }

  set value0(value: BigInt) {
    this.set("value0", Value.fromBigInt(value));
  }
}

export class UniswapV2ZapInGeneralV2inCaseTokengetsStuck extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV2ZapInGeneralV2inCaseTokengetsStuck entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV2ZapInGeneralV2inCaseTokengetsStuck entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "UniswapV2ZapInGeneralV2inCaseTokengetsStuck",
      id.toString(),
      this
    );
  }

  static load(id: string): UniswapV2ZapInGeneralV2inCaseTokengetsStuck | null {
    return store.get(
      "UniswapV2ZapInGeneralV2inCaseTokengetsStuck",
      id
    ) as UniswapV2ZapInGeneralV2inCaseTokengetsStuck | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _TokenAddress(): Bytes {
    let value = this.get("_TokenAddress");
    return value.toBytes();
  }

  set _TokenAddress(value: Bytes) {
    this.set("_TokenAddress", Value.fromBytes(value));
  }
}

export class UniswapV2ZapInGeneralV2renounceOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV2ZapInGeneralV2renounceOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV2ZapInGeneralV2renounceOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV2ZapInGeneralV2renounceOwnership", id.toString(), this);
  }

  static load(id: string): UniswapV2ZapInGeneralV2renounceOwnership | null {
    return store.get(
      "UniswapV2ZapInGeneralV2renounceOwnership",
      id
    ) as UniswapV2ZapInGeneralV2renounceOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UniswapV2ZapInGeneralV2setnewdzgoodwillAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV2ZapInGeneralV2setnewdzgoodwillAddress entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV2ZapInGeneralV2setnewdzgoodwillAddress entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "UniswapV2ZapInGeneralV2setnewdzgoodwillAddress",
      id.toString(),
      this
    );
  }

  static load(
    id: string
  ): UniswapV2ZapInGeneralV2setnewdzgoodwillAddress | null {
    return store.get(
      "UniswapV2ZapInGeneralV2setnewdzgoodwillAddress",
      id
    ) as UniswapV2ZapInGeneralV2setnewdzgoodwillAddress | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _new_dzgoodwillAddress(): Bytes {
    let value = this.get("_new_dzgoodwillAddress");
    return value.toBytes();
  }

  set _new_dzgoodwillAddress(value: Bytes) {
    this.set("_new_dzgoodwillAddress", Value.fromBytes(value));
  }
}

export class UniswapV2ZapInGeneralV2setnewgoodwill extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV2ZapInGeneralV2setnewgoodwill entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV2ZapInGeneralV2setnewgoodwill entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV2ZapInGeneralV2setnewgoodwill", id.toString(), this);
  }

  static load(id: string): UniswapV2ZapInGeneralV2setnewgoodwill | null {
    return store.get(
      "UniswapV2ZapInGeneralV2setnewgoodwill",
      id
    ) as UniswapV2ZapInGeneralV2setnewgoodwill | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _new_goodwill(): i32 {
    let value = this.get("_new_goodwill");
    return value.toI32();
  }

  set _new_goodwill(value: i32) {
    this.set("_new_goodwill", Value.fromI32(value));
  }
}

export class UniswapV2ZapInGeneralV2toggleContractActive extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV2ZapInGeneralV2toggleContractActive entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV2ZapInGeneralV2toggleContractActive entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "UniswapV2ZapInGeneralV2toggleContractActive",
      id.toString(),
      this
    );
  }

  static load(id: string): UniswapV2ZapInGeneralV2toggleContractActive | null {
    return store.get(
      "UniswapV2ZapInGeneralV2toggleContractActive",
      id
    ) as UniswapV2ZapInGeneralV2toggleContractActive | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UniswapV2ZapInGeneralV2transferOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV2ZapInGeneralV2transferOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV2ZapInGeneralV2transferOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV2ZapInGeneralV2transferOwnership", id.toString(), this);
  }

  static load(id: string): UniswapV2ZapInGeneralV2transferOwnership | null {
    return store.get(
      "UniswapV2ZapInGeneralV2transferOwnership",
      id
    ) as UniswapV2ZapInGeneralV2transferOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class UniswapV2ZapInGeneralV2withdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UniswapV2ZapInGeneralV2withdraw entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapV2ZapInGeneralV2withdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapV2ZapInGeneralV2withdraw", id.toString(), this);
  }

  static load(id: string): UniswapV2ZapInGeneralV2withdraw | null {
    return store.get(
      "UniswapV2ZapInGeneralV2withdraw",
      id
    ) as UniswapV2ZapInGeneralV2withdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class MultiPoolZapV14multipleZapIn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save MultiPoolZapV14multipleZapIn entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MultiPoolZapV14multipleZapIn entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MultiPoolZapV14multipleZapIn", id.toString(), this);
  }

  static load(id: string): MultiPoolZapV14multipleZapIn | null {
    return store.get(
      "MultiPoolZapV14multipleZapIn",
      id
    ) as MultiPoolZapV14multipleZapIn | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _IncomingTokenContractAddress(): Bytes {
    let value = this.get("_IncomingTokenContractAddress");
    return value.toBytes();
  }

  set _IncomingTokenContractAddress(value: Bytes) {
    this.set("_IncomingTokenContractAddress", Value.fromBytes(value));
  }

  get _IncomingTokenQty(): BigInt {
    let value = this.get("_IncomingTokenQty");
    return value.toBigInt();
  }

  set _IncomingTokenQty(value: BigInt) {
    this.set("_IncomingTokenQty", Value.fromBigInt(value));
  }

  get underlyingTokenAddresses(): Array<Bytes> {
    let value = this.get("underlyingTokenAddresses");
    return value.toBytesArray();
  }

  set underlyingTokenAddresses(value: Array<Address>) {
    this.set("underlyingTokenAddresses", Value.fromAddressArray(value));
  }

  get respectiveWeightedValues(): Array<BigInt> {
    let value = this.get("respectiveWeightedValues");
    return value.toBigIntArray();
  }

  set respectiveWeightedValues(value: Array<BigInt>) {
    this.set("respectiveWeightedValues", Value.fromBigIntArray(value));
  }
}

export class MultiPoolZapV14renounceOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save MultiPoolZapV14renounceOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MultiPoolZapV14renounceOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MultiPoolZapV14renounceOwnership", id.toString(), this);
  }

  static load(id: string): MultiPoolZapV14renounceOwnership | null {
    return store.get(
      "MultiPoolZapV14renounceOwnership",
      id
    ) as MultiPoolZapV14renounceOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class MultiPoolZapV14setUniswapFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save MultiPoolZapV14setUniswapFactory entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MultiPoolZapV14setUniswapFactory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MultiPoolZapV14setUniswapFactory", id.toString(), this);
  }

  static load(id: string): MultiPoolZapV14setUniswapFactory | null {
    return store.get(
      "MultiPoolZapV14setUniswapFactory",
      id
    ) as MultiPoolZapV14setUniswapFactory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _UniswapFactory(): Bytes {
    let value = this.get("_UniswapFactory");
    return value.toBytes();
  }

  set _UniswapFactory(value: Bytes) {
    this.set("_UniswapFactory", Value.fromBytes(value));
  }
}

export class MultiPoolZapV14setnewdzgoodwillAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save MultiPoolZapV14setnewdzgoodwillAddress entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MultiPoolZapV14setnewdzgoodwillAddress entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MultiPoolZapV14setnewdzgoodwillAddress", id.toString(), this);
  }

  static load(id: string): MultiPoolZapV14setnewdzgoodwillAddress | null {
    return store.get(
      "MultiPoolZapV14setnewdzgoodwillAddress",
      id
    ) as MultiPoolZapV14setnewdzgoodwillAddress | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _new_dzgoodwillAddress(): Bytes {
    let value = this.get("_new_dzgoodwillAddress");
    return value.toBytes();
  }

  set _new_dzgoodwillAddress(value: Bytes) {
    this.set("_new_dzgoodwillAddress", Value.fromBytes(value));
  }
}

export class MultiPoolZapV14setnewgoodwill extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save MultiPoolZapV14setnewgoodwill entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MultiPoolZapV14setnewgoodwill entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MultiPoolZapV14setnewgoodwill", id.toString(), this);
  }

  static load(id: string): MultiPoolZapV14setnewgoodwill | null {
    return store.get(
      "MultiPoolZapV14setnewgoodwill",
      id
    ) as MultiPoolZapV14setnewgoodwill | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _new_goodwill(): i32 {
    let value = this.get("_new_goodwill");
    return value.toI32();
  }

  set _new_goodwill(value: i32) {
    this.set("_new_goodwill", Value.fromI32(value));
  }
}

export class MultiPoolZapV14setuniswapPoolZapAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save MultiPoolZapV14setuniswapPoolZapAddress entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MultiPoolZapV14setuniswapPoolZapAddress entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MultiPoolZapV14setuniswapPoolZapAddress", id.toString(), this);
  }

  static load(id: string): MultiPoolZapV14setuniswapPoolZapAddress | null {
    return store.get(
      "MultiPoolZapV14setuniswapPoolZapAddress",
      id
    ) as MultiPoolZapV14setuniswapPoolZapAddress | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _uniswapPoolZapAddress(): Bytes {
    let value = this.get("_uniswapPoolZapAddress");
    return value.toBytes();
  }

  set _uniswapPoolZapAddress(value: Bytes) {
    this.set("_uniswapPoolZapAddress", Value.fromBytes(value));
  }
}

export class MultiPoolZapV14transferOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save MultiPoolZapV14transferOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MultiPoolZapV14transferOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MultiPoolZapV14transferOwnership", id.toString(), this);
  }

  static load(id: string): MultiPoolZapV14transferOwnership | null {
    return store.get(
      "MultiPoolZapV14transferOwnership",
      id
    ) as MultiPoolZapV14transferOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class CurvetoCurvePipeCurve2Curve extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurvetoCurvePipeCurve2Curve entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurvetoCurvePipeCurve2Curve entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurvetoCurvePipeCurve2Curve", id.toString(), this);
  }

  static load(id: string): CurvetoCurvePipeCurve2Curve | null {
    return store.get(
      "CurvetoCurvePipeCurve2Curve",
      id
    ) as CurvetoCurvePipeCurve2Curve | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _toWhomToIssue(): Bytes {
    let value = this.get("_toWhomToIssue");
    return value.toBytes();
  }

  set _toWhomToIssue(value: Bytes) {
    this.set("_toWhomToIssue", Value.fromBytes(value));
  }

  get _incomingCurveExchange(): Bytes {
    let value = this.get("_incomingCurveExchange");
    return value.toBytes();
  }

  set _incomingCurveExchange(value: Bytes) {
    this.set("_incomingCurveExchange", Value.fromBytes(value));
  }

  get _IncomingCRV(): BigInt {
    let value = this.get("_IncomingCRV");
    return value.toBigInt();
  }

  set _IncomingCRV(value: BigInt) {
    this.set("_IncomingCRV", Value.fromBigInt(value));
  }

  get _toCurveExchange(): Bytes {
    let value = this.get("_toCurveExchange");
    return value.toBytes();
  }

  set _toCurveExchange(value: Bytes) {
    this.set("_toCurveExchange", Value.fromBytes(value));
  }
}

export class CurvetoCurvePipeapproveToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurvetoCurvePipeapproveToken entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurvetoCurvePipeapproveToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurvetoCurvePipeapproveToken", id.toString(), this);
  }

  static load(id: string): CurvetoCurvePipeapproveToken | null {
    return store.get(
      "CurvetoCurvePipeapproveToken",
      id
    ) as CurvetoCurvePipeapproveToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CurvetoCurvePipedestruct extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurvetoCurvePipedestruct entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurvetoCurvePipedestruct entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurvetoCurvePipedestruct", id.toString(), this);
  }

  static load(id: string): CurvetoCurvePipedestruct | null {
    return store.get(
      "CurvetoCurvePipedestruct",
      id
    ) as CurvetoCurvePipedestruct | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CurvetoCurvePipeinCaseTokengetsStuck extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurvetoCurvePipeinCaseTokengetsStuck entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurvetoCurvePipeinCaseTokengetsStuck entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurvetoCurvePipeinCaseTokengetsStuck", id.toString(), this);
  }

  static load(id: string): CurvetoCurvePipeinCaseTokengetsStuck | null {
    return store.get(
      "CurvetoCurvePipeinCaseTokengetsStuck",
      id
    ) as CurvetoCurvePipeinCaseTokengetsStuck | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _TokenAddress(): Bytes {
    let value = this.get("_TokenAddress");
    return value.toBytes();
  }

  set _TokenAddress(value: Bytes) {
    this.set("_TokenAddress", Value.fromBytes(value));
  }
}

export class CurvetoCurvePiperenounceOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurvetoCurvePiperenounceOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurvetoCurvePiperenounceOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurvetoCurvePiperenounceOwnership", id.toString(), this);
  }

  static load(id: string): CurvetoCurvePiperenounceOwnership | null {
    return store.get(
      "CurvetoCurvePiperenounceOwnership",
      id
    ) as CurvetoCurvePiperenounceOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CurvetoCurvePipetoggleContractActive extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurvetoCurvePipetoggleContractActive entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurvetoCurvePipetoggleContractActive entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurvetoCurvePipetoggleContractActive", id.toString(), this);
  }

  static load(id: string): CurvetoCurvePipetoggleContractActive | null {
    return store.get(
      "CurvetoCurvePipetoggleContractActive",
      id
    ) as CurvetoCurvePipetoggleContractActive | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CurvetoCurvePipetransferOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurvetoCurvePipetransferOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurvetoCurvePipetransferOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurvetoCurvePipetransferOwnership", id.toString(), this);
  }

  static load(id: string): CurvetoCurvePipetransferOwnership | null {
    return store.get(
      "CurvetoCurvePipetransferOwnership",
      id
    ) as CurvetoCurvePipetransferOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class CurvetoCurvePipewithdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CurvetoCurvePipewithdraw entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurvetoCurvePipewithdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurvetoCurvePipewithdraw", id.toString(), this);
  }

  static load(id: string): CurvetoCurvePipewithdraw | null {
    return store.get(
      "CurvetoCurvePipewithdraw",
      id
    ) as CurvetoCurvePipewithdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class BalancerUniswapV2PipeV11PipeBalancerUniV2 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerUniswapV2PipeV11PipeBalancerUniV2 entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerUniswapV2PipeV11PipeBalancerUniV2 entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BalancerUniswapV2PipeV11PipeBalancerUniV2", id.toString(), this);
  }

  static load(id: string): BalancerUniswapV2PipeV11PipeBalancerUniV2 | null {
    return store.get(
      "BalancerUniswapV2PipeV11PipeBalancerUniV2",
      id
    ) as BalancerUniswapV2PipeV11PipeBalancerUniV2 | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _FromBalancerPoolAddress(): Bytes {
    let value = this.get("_FromBalancerPoolAddress");
    return value.toBytes();
  }

  set _FromBalancerPoolAddress(value: Bytes) {
    this.set("_FromBalancerPoolAddress", Value.fromBytes(value));
  }

  get _IncomingBPT(): BigInt {
    let value = this.get("_IncomingBPT");
    return value.toBigInt();
  }

  set _IncomingBPT(value: BigInt) {
    this.set("_IncomingBPT", Value.fromBigInt(value));
  }

  get _toUniswapPoolAddress(): Bytes {
    let value = this.get("_toUniswapPoolAddress");
    return value.toBytes();
  }

  set _toUniswapPoolAddress(value: Bytes) {
    this.set("_toUniswapPoolAddress", Value.fromBytes(value));
  }

  get _toWhomToIssue(): Bytes {
    let value = this.get("_toWhomToIssue");
    return value.toBytes();
  }

  set _toWhomToIssue(value: Bytes) {
    this.set("_toWhomToIssue", Value.fromBytes(value));
  }

  get _minUniV2Tokens(): BigInt {
    let value = this.get("_minUniV2Tokens");
    return value.toBigInt();
  }

  set _minUniV2Tokens(value: BigInt) {
    this.set("_minUniV2Tokens", Value.fromBigInt(value));
  }

  get value0(): BigInt {
    let value = this.get("value0");
    return value.toBigInt();
  }

  set value0(value: BigInt) {
    this.set("value0", Value.fromBigInt(value));
  }
}

export class BalancerUniswapV2PipeV11PipeUniV2Balancer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerUniswapV2PipeV11PipeUniV2Balancer entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerUniswapV2PipeV11PipeUniV2Balancer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BalancerUniswapV2PipeV11PipeUniV2Balancer", id.toString(), this);
  }

  static load(id: string): BalancerUniswapV2PipeV11PipeUniV2Balancer | null {
    return store.get(
      "BalancerUniswapV2PipeV11PipeUniV2Balancer",
      id
    ) as BalancerUniswapV2PipeV11PipeUniV2Balancer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _FromUniswapPoolAddress(): Bytes {
    let value = this.get("_FromUniswapPoolAddress");
    return value.toBytes();
  }

  set _FromUniswapPoolAddress(value: Bytes) {
    this.set("_FromUniswapPoolAddress", Value.fromBytes(value));
  }

  get _IncomingLPT(): BigInt {
    let value = this.get("_IncomingLPT");
    return value.toBigInt();
  }

  set _IncomingLPT(value: BigInt) {
    this.set("_IncomingLPT", Value.fromBigInt(value));
  }

  get _ToBalancerPoolAddress(): Bytes {
    let value = this.get("_ToBalancerPoolAddress");
    return value.toBytes();
  }

  set _ToBalancerPoolAddress(value: Bytes) {
    this.set("_ToBalancerPoolAddress", Value.fromBytes(value));
  }

  get _toWhomToIssue(): Bytes {
    let value = this.get("_toWhomToIssue");
    return value.toBytes();
  }

  set _toWhomToIssue(value: Bytes) {
    this.set("_toWhomToIssue", Value.fromBytes(value));
  }

  get _minBPTokens(): BigInt {
    let value = this.get("_minBPTokens");
    return value.toBigInt();
  }

  set _minBPTokens(value: BigInt) {
    this.set("_minBPTokens", Value.fromBigInt(value));
  }

  get value0(): BigInt {
    let value = this.get("value0");
    return value.toBigInt();
  }

  set value0(value: BigInt) {
    this.set("value0", Value.fromBigInt(value));
  }
}

export class BalancerUniswapV2PipeV11inCaseTokengetsStuck extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerUniswapV2PipeV11inCaseTokengetsStuck entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerUniswapV2PipeV11inCaseTokengetsStuck entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "BalancerUniswapV2PipeV11inCaseTokengetsStuck",
      id.toString(),
      this
    );
  }

  static load(id: string): BalancerUniswapV2PipeV11inCaseTokengetsStuck | null {
    return store.get(
      "BalancerUniswapV2PipeV11inCaseTokengetsStuck",
      id
    ) as BalancerUniswapV2PipeV11inCaseTokengetsStuck | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _TokenAddress(): Bytes {
    let value = this.get("_TokenAddress");
    return value.toBytes();
  }

  set _TokenAddress(value: Bytes) {
    this.set("_TokenAddress", Value.fromBytes(value));
  }
}

export class BalancerUniswapV2PipeV11renounceOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerUniswapV2PipeV11renounceOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerUniswapV2PipeV11renounceOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BalancerUniswapV2PipeV11renounceOwnership", id.toString(), this);
  }

  static load(id: string): BalancerUniswapV2PipeV11renounceOwnership | null {
    return store.get(
      "BalancerUniswapV2PipeV11renounceOwnership",
      id
    ) as BalancerUniswapV2PipeV11renounceOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class BalancerUniswapV2PipeV11toggleContractActive extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerUniswapV2PipeV11toggleContractActive entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerUniswapV2PipeV11toggleContractActive entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "BalancerUniswapV2PipeV11toggleContractActive",
      id.toString(),
      this
    );
  }

  static load(id: string): BalancerUniswapV2PipeV11toggleContractActive | null {
    return store.get(
      "BalancerUniswapV2PipeV11toggleContractActive",
      id
    ) as BalancerUniswapV2PipeV11toggleContractActive | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class BalancerUniswapV2PipeV11transferOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerUniswapV2PipeV11transferOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerUniswapV2PipeV11transferOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BalancerUniswapV2PipeV11transferOwnership", id.toString(), this);
  }

  static load(id: string): BalancerUniswapV2PipeV11transferOwnership | null {
    return store.get(
      "BalancerUniswapV2PipeV11transferOwnership",
      id
    ) as BalancerUniswapV2PipeV11transferOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class BalancerUniswapV2PipeV11updateZapAddresses extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerUniswapV2PipeV11updateZapAddresses entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerUniswapV2PipeV11updateZapAddresses entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "BalancerUniswapV2PipeV11updateZapAddresses",
      id.toString(),
      this
    );
  }

  static load(id: string): BalancerUniswapV2PipeV11updateZapAddresses | null {
    return store.get(
      "BalancerUniswapV2PipeV11updateZapAddresses",
      id
    ) as BalancerUniswapV2PipeV11updateZapAddresses | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _balancerUnZap(): Bytes {
    let value = this.get("_balancerUnZap");
    return value.toBytes();
  }

  set _balancerUnZap(value: Bytes) {
    this.set("_balancerUnZap", Value.fromBytes(value));
  }

  get _uniZapIn(): Bytes {
    let value = this.get("_uniZapIn");
    return value.toBytes();
  }

  set _uniZapIn(value: Bytes) {
    this.set("_uniZapIn", Value.fromBytes(value));
  }

  get _balancerZapIn(): Bytes {
    let value = this.get("_balancerZapIn");
    return value.toBytes();
  }

  set _balancerZapIn(value: Bytes) {
    this.set("_balancerZapIn", Value.fromBytes(value));
  }

  get _uniUnZap(): Bytes {
    let value = this.get("_uniUnZap");
    return value.toBytes();
  }

  set _uniUnZap(value: Bytes) {
    this.set("_uniUnZap", Value.fromBytes(value));
  }
}

export class BalancerUniswapV2PipeV11withdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerUniswapV2PipeV11withdraw entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerUniswapV2PipeV11withdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BalancerUniswapV2PipeV11withdraw", id.toString(), this);
  }

  static load(id: string): BalancerUniswapV2PipeV11withdraw | null {
    return store.get(
      "BalancerUniswapV2PipeV11withdraw",
      id
    ) as BalancerUniswapV2PipeV11withdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class BalancerZapInGeneralV25EasyZapIn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerZapInGeneralV25EasyZapIn entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerZapInGeneralV25EasyZapIn entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BalancerZapInGeneralV25EasyZapIn", id.toString(), this);
  }

  static load(id: string): BalancerZapInGeneralV25EasyZapIn | null {
    return store.get(
      "BalancerZapInGeneralV25EasyZapIn",
      id
    ) as BalancerZapInGeneralV25EasyZapIn | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _FromTokenContractAddress(): Bytes {
    let value = this.get("_FromTokenContractAddress");
    return value.toBytes();
  }

  set _FromTokenContractAddress(value: Bytes) {
    this.set("_FromTokenContractAddress", Value.fromBytes(value));
  }

  get _ToBalancerPoolAddress(): Bytes {
    let value = this.get("_ToBalancerPoolAddress");
    return value.toBytes();
  }

  set _ToBalancerPoolAddress(value: Bytes) {
    this.set("_ToBalancerPoolAddress", Value.fromBytes(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }

  get _minPoolTokens(): BigInt {
    let value = this.get("_minPoolTokens");
    return value.toBigInt();
  }

  set _minPoolTokens(value: BigInt) {
    this.set("_minPoolTokens", Value.fromBigInt(value));
  }

  get tokensBought(): BigInt {
    let value = this.get("tokensBought");
    return value.toBigInt();
  }

  set tokensBought(value: BigInt) {
    this.set("tokensBought", Value.fromBigInt(value));
  }
}

export class BalancerZapInGeneralV25token2Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerZapInGeneralV25token2Token entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerZapInGeneralV25token2Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BalancerZapInGeneralV25token2Token", id.toString(), this);
  }

  static load(id: string): BalancerZapInGeneralV25token2Token | null {
    return store.get(
      "BalancerZapInGeneralV25token2Token",
      id
    ) as BalancerZapInGeneralV25token2Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _FromTokenContractAddress(): Bytes {
    let value = this.get("_FromTokenContractAddress");
    return value.toBytes();
  }

  set _FromTokenContractAddress(value: Bytes) {
    this.set("_FromTokenContractAddress", Value.fromBytes(value));
  }

  get _ToTokenContractAddress(): Bytes {
    let value = this.get("_ToTokenContractAddress");
    return value.toBytes();
  }

  set _ToTokenContractAddress(value: Bytes) {
    this.set("_ToTokenContractAddress", Value.fromBytes(value));
  }

  get tokens2Trade(): BigInt {
    let value = this.get("tokens2Trade");
    return value.toBigInt();
  }

  set tokens2Trade(value: BigInt) {
    this.set("tokens2Trade", Value.fromBigInt(value));
  }

  get tokenBought(): BigInt {
    let value = this.get("tokenBought");
    return value.toBigInt();
  }

  set tokenBought(value: BigInt) {
    this.set("tokenBought", Value.fromBigInt(value));
  }
}

export class BalancerZapInGeneralV25inCaseTokengetsStuck extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerZapInGeneralV25inCaseTokengetsStuck entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerZapInGeneralV25inCaseTokengetsStuck entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "BalancerZapInGeneralV25inCaseTokengetsStuck",
      id.toString(),
      this
    );
  }

  static load(id: string): BalancerZapInGeneralV25inCaseTokengetsStuck | null {
    return store.get(
      "BalancerZapInGeneralV25inCaseTokengetsStuck",
      id
    ) as BalancerZapInGeneralV25inCaseTokengetsStuck | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _TokenAddress(): Bytes {
    let value = this.get("_TokenAddress");
    return value.toBytes();
  }

  set _TokenAddress(value: Bytes) {
    this.set("_TokenAddress", Value.fromBytes(value));
  }
}

export class BalancerZapInGeneralV25renounceOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerZapInGeneralV25renounceOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerZapInGeneralV25renounceOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BalancerZapInGeneralV25renounceOwnership", id.toString(), this);
  }

  static load(id: string): BalancerZapInGeneralV25renounceOwnership | null {
    return store.get(
      "BalancerZapInGeneralV25renounceOwnership",
      id
    ) as BalancerZapInGeneralV25renounceOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class BalancerZapInGeneralV25setnewgoodwill extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerZapInGeneralV25setnewgoodwill entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerZapInGeneralV25setnewgoodwill entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BalancerZapInGeneralV25setnewgoodwill", id.toString(), this);
  }

  static load(id: string): BalancerZapInGeneralV25setnewgoodwill | null {
    return store.get(
      "BalancerZapInGeneralV25setnewgoodwill",
      id
    ) as BalancerZapInGeneralV25setnewgoodwill | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _new_goodwill(): i32 {
    let value = this.get("_new_goodwill");
    return value.toI32();
  }

  set _new_goodwill(value: i32) {
    this.set("_new_goodwill", Value.fromI32(value));
  }
}

export class BalancerZapInGeneralV25toggleContractActive extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerZapInGeneralV25toggleContractActive entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerZapInGeneralV25toggleContractActive entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "BalancerZapInGeneralV25toggleContractActive",
      id.toString(),
      this
    );
  }

  static load(id: string): BalancerZapInGeneralV25toggleContractActive | null {
    return store.get(
      "BalancerZapInGeneralV25toggleContractActive",
      id
    ) as BalancerZapInGeneralV25toggleContractActive | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class BalancerZapInGeneralV25transferOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerZapInGeneralV25transferOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerZapInGeneralV25transferOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BalancerZapInGeneralV25transferOwnership", id.toString(), this);
  }

  static load(id: string): BalancerZapInGeneralV25transferOwnership | null {
    return store.get(
      "BalancerZapInGeneralV25transferOwnership",
      id
    ) as BalancerZapInGeneralV25transferOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class BalancerZapInGeneralV25withdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BalancerZapInGeneralV25withdraw entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalancerZapInGeneralV25withdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BalancerZapInGeneralV25withdraw", id.toString(), this);
  }

  static load(id: string): BalancerZapInGeneralV25withdraw | null {
    return store.get(
      "BalancerZapInGeneralV25withdraw",
      id
    ) as BalancerZapInGeneralV25withdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UnipoolBridgeZapV1ZapBridge extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UnipoolBridgeZapV1ZapBridge entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UnipoolBridgeZapV1ZapBridge entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UnipoolBridgeZapV1ZapBridge", id.toString(), this);
  }

  static load(id: string): UnipoolBridgeZapV1ZapBridge | null {
    return store.get(
      "UnipoolBridgeZapV1ZapBridge",
      id
    ) as UnipoolBridgeZapV1ZapBridge | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _toWhomToIssue(): Bytes {
    let value = this.get("_toWhomToIssue");
    return value.toBytes();
  }

  set _toWhomToIssue(value: Bytes) {
    this.set("_toWhomToIssue", Value.fromBytes(value));
  }

  get _FromTokenContractAddress(): Bytes {
    let value = this.get("_FromTokenContractAddress");
    return value.toBytes();
  }

  set _FromTokenContractAddress(value: Bytes) {
    this.set("_FromTokenContractAddress", Value.fromBytes(value));
  }

  get _ToTokenContractAddress(): Bytes {
    let value = this.get("_ToTokenContractAddress");
    return value.toBytes();
  }

  set _ToTokenContractAddress(value: Bytes) {
    this.set("_ToTokenContractAddress", Value.fromBytes(value));
  }

  get _IncomingLP(): BigInt {
    let value = this.get("_IncomingLP");
    return value.toBigInt();
  }

  set _IncomingLP(value: BigInt) {
    this.set("_IncomingLP", Value.fromBigInt(value));
  }

  get value0(): boolean {
    let value = this.get("value0");
    return value.toBoolean();
  }

  set value0(value: boolean) {
    this.set("value0", Value.fromBoolean(value));
  }
}

export class UnipoolBridgeZapV1destruct extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UnipoolBridgeZapV1destruct entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UnipoolBridgeZapV1destruct entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UnipoolBridgeZapV1destruct", id.toString(), this);
  }

  static load(id: string): UnipoolBridgeZapV1destruct | null {
    return store.get(
      "UnipoolBridgeZapV1destruct",
      id
    ) as UnipoolBridgeZapV1destruct | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UnipoolBridgeZapV1inCaseTokengetsStuck extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UnipoolBridgeZapV1inCaseTokengetsStuck entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UnipoolBridgeZapV1inCaseTokengetsStuck entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UnipoolBridgeZapV1inCaseTokengetsStuck", id.toString(), this);
  }

  static load(id: string): UnipoolBridgeZapV1inCaseTokengetsStuck | null {
    return store.get(
      "UnipoolBridgeZapV1inCaseTokengetsStuck",
      id
    ) as UnipoolBridgeZapV1inCaseTokengetsStuck | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _TokenAddress(): Bytes {
    let value = this.get("_TokenAddress");
    return value.toBytes();
  }

  set _TokenAddress(value: Bytes) {
    this.set("_TokenAddress", Value.fromBytes(value));
  }
}

export class UnipoolBridgeZapV1renounceOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UnipoolBridgeZapV1renounceOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UnipoolBridgeZapV1renounceOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UnipoolBridgeZapV1renounceOwnership", id.toString(), this);
  }

  static load(id: string): UnipoolBridgeZapV1renounceOwnership | null {
    return store.get(
      "UnipoolBridgeZapV1renounceOwnership",
      id
    ) as UnipoolBridgeZapV1renounceOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UnipoolBridgeZapV1setnewUniSwapFactoryAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UnipoolBridgeZapV1setnewUniSwapFactoryAddress entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UnipoolBridgeZapV1setnewUniSwapFactoryAddress entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "UnipoolBridgeZapV1setnewUniSwapFactoryAddress",
      id.toString(),
      this
    );
  }

  static load(
    id: string
  ): UnipoolBridgeZapV1setnewUniSwapFactoryAddress | null {
    return store.get(
      "UnipoolBridgeZapV1setnewUniSwapFactoryAddress",
      id
    ) as UnipoolBridgeZapV1setnewUniSwapFactoryAddress | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _new_UniSwapFactoryAddress(): Bytes {
    let value = this.get("_new_UniSwapFactoryAddress");
    return value.toBytes();
  }

  set _new_UniSwapFactoryAddress(value: Bytes) {
    this.set("_new_UniSwapFactoryAddress", Value.fromBytes(value));
  }
}

export class UnipoolBridgeZapV1setnewdzgoodwillAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UnipoolBridgeZapV1setnewdzgoodwillAddress entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UnipoolBridgeZapV1setnewdzgoodwillAddress entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UnipoolBridgeZapV1setnewdzgoodwillAddress", id.toString(), this);
  }

  static load(id: string): UnipoolBridgeZapV1setnewdzgoodwillAddress | null {
    return store.get(
      "UnipoolBridgeZapV1setnewdzgoodwillAddress",
      id
    ) as UnipoolBridgeZapV1setnewdzgoodwillAddress | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _new_dzgoodwillAddress(): Bytes {
    let value = this.get("_new_dzgoodwillAddress");
    return value.toBytes();
  }

  set _new_dzgoodwillAddress(value: Bytes) {
    this.set("_new_dzgoodwillAddress", Value.fromBytes(value));
  }
}

export class UnipoolBridgeZapV1setnewgoodwill extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UnipoolBridgeZapV1setnewgoodwill entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UnipoolBridgeZapV1setnewgoodwill entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UnipoolBridgeZapV1setnewgoodwill", id.toString(), this);
  }

  static load(id: string): UnipoolBridgeZapV1setnewgoodwill | null {
    return store.get(
      "UnipoolBridgeZapV1setnewgoodwill",
      id
    ) as UnipoolBridgeZapV1setnewgoodwill | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get _new_goodwill(): i32 {
    let value = this.get("_new_goodwill");
    return value.toI32();
  }

  set _new_goodwill(value: i32) {
    this.set("_new_goodwill", Value.fromI32(value));
  }
}

export class UnipoolBridgeZapV1toggleContractActive extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UnipoolBridgeZapV1toggleContractActive entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UnipoolBridgeZapV1toggleContractActive entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UnipoolBridgeZapV1toggleContractActive", id.toString(), this);
  }

  static load(id: string): UnipoolBridgeZapV1toggleContractActive | null {
    return store.get(
      "UnipoolBridgeZapV1toggleContractActive",
      id
    ) as UnipoolBridgeZapV1toggleContractActive | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UnipoolBridgeZapV1transferOwnership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UnipoolBridgeZapV1transferOwnership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UnipoolBridgeZapV1transferOwnership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UnipoolBridgeZapV1transferOwnership", id.toString(), this);
  }

  static load(id: string): UnipoolBridgeZapV1transferOwnership | null {
    return store.get(
      "UnipoolBridgeZapV1transferOwnership",
      id
    ) as UnipoolBridgeZapV1transferOwnership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class UnipoolBridgeZapV1withdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UnipoolBridgeZapV1withdraw entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UnipoolBridgeZapV1withdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UnipoolBridgeZapV1withdraw", id.toString(), this);
  }

  static load(id: string): UnipoolBridgeZapV1withdraw | null {
    return store.get(
      "UnipoolBridgeZapV1withdraw",
      id
    ) as UnipoolBridgeZapV1withdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
