// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CurveGeneralZapOutV2___getIntermediateTokenResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class CurveGeneralZapOutV2 extends ethereum.SmartContract {
  static bind(address: Address): CurveGeneralZapOutV2 {
    return new CurveGeneralZapOutV2("CurveGeneralZapOutV2", address);
  }

  ZapOut(
    _toWhomToIssue: Address,
    _curveExchangeAddress: Address,
    _tokenCount: BigInt,
    _IncomingCRV: BigInt,
    _ToTokenAddress: Address,
    _minToTokens: BigInt
  ): BigInt {
    let result = super.call(
      "ZapOut",
      "ZapOut(address,address,uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_toWhomToIssue),
        ethereum.Value.fromAddress(_curveExchangeAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenCount),
        ethereum.Value.fromUnsignedBigInt(_IncomingCRV),
        ethereum.Value.fromAddress(_ToTokenAddress),
        ethereum.Value.fromUnsignedBigInt(_minToTokens)
      ]
    );

    return result[0].toBigInt();
  }

  try_ZapOut(
    _toWhomToIssue: Address,
    _curveExchangeAddress: Address,
    _tokenCount: BigInt,
    _IncomingCRV: BigInt,
    _ToTokenAddress: Address,
    _minToTokens: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ZapOut",
      "ZapOut(address,address,uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_toWhomToIssue),
        ethereum.Value.fromAddress(_curveExchangeAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenCount),
        ethereum.Value.fromUnsignedBigInt(_IncomingCRV),
        ethereum.Value.fromAddress(_ToTokenAddress),
        ethereum.Value.fromUnsignedBigInt(_minToTokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _getIntermediateToken(
    _ToTokenAddress: Address,
    _curveExchangeAddress: Address,
    _tokenCount: BigInt
  ): CurveGeneralZapOutV2___getIntermediateTokenResult {
    let result = super.call(
      "_getIntermediateToken",
      "_getIntermediateToken(address,address,uint256):(bool,uint256)",
      [
        ethereum.Value.fromAddress(_ToTokenAddress),
        ethereum.Value.fromAddress(_curveExchangeAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenCount)
      ]
    );

    return new CurveGeneralZapOutV2___getIntermediateTokenResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try__getIntermediateToken(
    _ToTokenAddress: Address,
    _curveExchangeAddress: Address,
    _tokenCount: BigInt
  ): ethereum.CallResult<CurveGeneralZapOutV2___getIntermediateTokenResult> {
    let result = super.tryCall(
      "_getIntermediateToken",
      "_getIntermediateToken(address,address,uint256):(bool,uint256)",
      [
        ethereum.Value.fromAddress(_ToTokenAddress),
        ethereum.Value.fromAddress(_curveExchangeAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenCount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CurveGeneralZapOutV2___getIntermediateTokenResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  _token2Eth(
    _FromTokenContractAddress: Address,
    tokens2Trade: BigInt,
    _toWhomToIssue: Address
  ): BigInt {
    let result = super.call(
      "_token2Eth",
      "_token2Eth(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_FromTokenContractAddress),
        ethereum.Value.fromUnsignedBigInt(tokens2Trade),
        ethereum.Value.fromAddress(_toWhomToIssue)
      ]
    );

    return result[0].toBigInt();
  }

  try__token2Eth(
    _FromTokenContractAddress: Address,
    tokens2Trade: BigInt,
    _toWhomToIssue: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_token2Eth",
      "_token2Eth(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_FromTokenContractAddress),
        ethereum.Value.fromUnsignedBigInt(tokens2Trade),
        ethereum.Value.fromAddress(_toWhomToIssue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _token2Token(
    _FromTokenContractAddress: Address,
    _ToWhomToIssue: Address,
    _ToTokenContractAddress: Address,
    tokens2Trade: BigInt
  ): BigInt {
    let result = super.call(
      "_token2Token",
      "_token2Token(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_FromTokenContractAddress),
        ethereum.Value.fromAddress(_ToWhomToIssue),
        ethereum.Value.fromAddress(_ToTokenContractAddress),
        ethereum.Value.fromUnsignedBigInt(tokens2Trade)
      ]
    );

    return result[0].toBigInt();
  }

  try__token2Token(
    _FromTokenContractAddress: Address,
    _ToWhomToIssue: Address,
    _ToTokenContractAddress: Address,
    tokens2Trade: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_token2Token",
      "_token2Token(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_FromTokenContractAddress),
        ethereum.Value.fromAddress(_ToWhomToIssue),
        ethereum.Value.fromAddress(_ToTokenContractAddress),
        ethereum.Value.fromUnsignedBigInt(tokens2Trade)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cToken(param0: Address): Address {
    let result = super.call("cToken", "cToken(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_cToken(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("cToken", "cToken(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dzgoodwillAddress(): Address {
    let result = super.call(
      "dzgoodwillAddress",
      "dzgoodwillAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_dzgoodwillAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "dzgoodwillAddress",
      "dzgoodwillAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  exchange2Token(param0: Address): Address {
    let result = super.call(
      "exchange2Token",
      "exchange2Token(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_exchange2Token(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "exchange2Token",
      "exchange2Token(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCoins(
    _curveExchangeAddress: Address,
    _tokenCount: BigInt
  ): Array<Address> {
    let result = super.call(
      "getCoins",
      "getCoins(address,uint256):(address[])",
      [
        ethereum.Value.fromAddress(_curveExchangeAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenCount)
      ]
    );

    return result[0].toAddressArray();
  }

  try_getCoins(
    _curveExchangeAddress: Address,
    _tokenCount: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getCoins",
      "getCoins(address,uint256):(address[])",
      [
        ethereum.Value.fromAddress(_curveExchangeAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenCount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getUnderlyingCoins(
    _curveExchangeAddress: Address,
    _tokenCount: BigInt
  ): Array<Address> {
    let result = super.call(
      "getUnderlyingCoins",
      "getUnderlyingCoins(address,uint256):(address[])",
      [
        ethereum.Value.fromAddress(_curveExchangeAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenCount)
      ]
    );

    return result[0].toAddressArray();
  }

  try_getUnderlyingCoins(
    _curveExchangeAddress: Address,
    _tokenCount: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getUnderlyingCoins",
      "getUnderlyingCoins(address,uint256):(address[])",
      [
        ethereum.Value.fromAddress(_curveExchangeAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenCount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  goodwill(): i32 {
    let result = super.call("goodwill", "goodwill():(uint16)", []);

    return result[0].toI32();
  }

  try_goodwill(): ethereum.CallResult<i32> {
    let result = super.tryCall("goodwill", "goodwill():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sUsdTokenAddress(): Address {
    let result = super.call(
      "sUsdTokenAddress",
      "sUsdTokenAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_sUsdTokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "sUsdTokenAddress",
      "sUsdTokenAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  yToken(param0: Address): Address {
    let result = super.call("yToken", "yToken(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_yToken(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("yToken", "yToken(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _goodwill(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _dzgoodwillAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class ZapOutCall extends ethereum.Call {
  get inputs(): ZapOutCall__Inputs {
    return new ZapOutCall__Inputs(this);
  }

  get outputs(): ZapOutCall__Outputs {
    return new ZapOutCall__Outputs(this);
  }
}

export class ZapOutCall__Inputs {
  _call: ZapOutCall;

  constructor(call: ZapOutCall) {
    this._call = call;
  }

  get _toWhomToIssue(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _curveExchangeAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenCount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _IncomingCRV(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _ToTokenAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _minToTokens(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ZapOutCall__Outputs {
  _call: ZapOutCall;

  constructor(call: ZapOutCall) {
    this._call = call;
  }

  get ToTokensBought(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ZapoutToUnderlyingCall extends ethereum.Call {
  get inputs(): ZapoutToUnderlyingCall__Inputs {
    return new ZapoutToUnderlyingCall__Inputs(this);
  }

  get outputs(): ZapoutToUnderlyingCall__Outputs {
    return new ZapoutToUnderlyingCall__Outputs(this);
  }
}

export class ZapoutToUnderlyingCall__Inputs {
  _call: ZapoutToUnderlyingCall;

  constructor(call: ZapoutToUnderlyingCall) {
    this._call = call;
  }

  get _toWhomToIssue(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _curveExchangeAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _IncomingCRV(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _tokenCount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ZapoutToUnderlyingCall__Outputs {
  _call: ZapoutToUnderlyingCall;

  constructor(call: ZapoutToUnderlyingCall) {
    this._call = call;
  }
}

export class _token2EthCall extends ethereum.Call {
  get inputs(): _token2EthCall__Inputs {
    return new _token2EthCall__Inputs(this);
  }

  get outputs(): _token2EthCall__Outputs {
    return new _token2EthCall__Outputs(this);
  }
}

export class _token2EthCall__Inputs {
  _call: _token2EthCall;

  constructor(call: _token2EthCall) {
    this._call = call;
  }

  get _FromTokenContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokens2Trade(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _toWhomToIssue(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class _token2EthCall__Outputs {
  _call: _token2EthCall;

  constructor(call: _token2EthCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _token2TokenCall extends ethereum.Call {
  get inputs(): _token2TokenCall__Inputs {
    return new _token2TokenCall__Inputs(this);
  }

  get outputs(): _token2TokenCall__Outputs {
    return new _token2TokenCall__Outputs(this);
  }
}

export class _token2TokenCall__Inputs {
  _call: _token2TokenCall;

  constructor(call: _token2TokenCall) {
    this._call = call;
  }

  get _FromTokenContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ToWhomToIssue(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ToTokenContractAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get tokens2Trade(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class _token2TokenCall__Outputs {
  _call: _token2TokenCall;

  constructor(call: _token2TokenCall) {
    this._call = call;
  }

  get tokenBought(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddCRVTokenCall extends ethereum.Call {
  get inputs(): AddCRVTokenCall__Inputs {
    return new AddCRVTokenCall__Inputs(this);
  }

  get outputs(): AddCRVTokenCall__Outputs {
    return new AddCRVTokenCall__Outputs(this);
  }
}

export class AddCRVTokenCall__Inputs {
  _call: AddCRVTokenCall;

  constructor(call: AddCRVTokenCall) {
    this._call = call;
  }

  get _exchangeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _crvTokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddCRVTokenCall__Outputs {
  _call: AddCRVTokenCall;

  constructor(call: AddCRVTokenCall) {
    this._call = call;
  }
}

export class AddCTokenCall extends ethereum.Call {
  get inputs(): AddCTokenCall__Inputs {
    return new AddCTokenCall__Inputs(this);
  }

  get outputs(): AddCTokenCall__Outputs {
    return new AddCTokenCall__Outputs(this);
  }
}

export class AddCTokenCall__Inputs {
  _call: AddCTokenCall;

  constructor(call: AddCTokenCall) {
    this._call = call;
  }

  get _cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _underlyingToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddCTokenCall__Outputs {
  _call: AddCTokenCall;

  constructor(call: AddCTokenCall) {
    this._call = call;
  }
}

export class AddYTokenCall extends ethereum.Call {
  get inputs(): AddYTokenCall__Inputs {
    return new AddYTokenCall__Inputs(this);
  }

  get outputs(): AddYTokenCall__Outputs {
    return new AddYTokenCall__Outputs(this);
  }
}

export class AddYTokenCall__Inputs {
  _call: AddYTokenCall;

  constructor(call: AddYTokenCall) {
    this._call = call;
  }

  get _yToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _underlyingToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddYTokenCall__Outputs {
  _call: AddYTokenCall;

  constructor(call: AddYTokenCall) {
    this._call = call;
  }
}

export class ApproveTokenCall extends ethereum.Call {
  get inputs(): ApproveTokenCall__Inputs {
    return new ApproveTokenCall__Inputs(this);
  }

  get outputs(): ApproveTokenCall__Outputs {
    return new ApproveTokenCall__Outputs(this);
  }
}

export class ApproveTokenCall__Inputs {
  _call: ApproveTokenCall;

  constructor(call: ApproveTokenCall) {
    this._call = call;
  }
}

export class ApproveTokenCall__Outputs {
  _call: ApproveTokenCall;

  constructor(call: ApproveTokenCall) {
    this._call = call;
  }
}

export class InCaseTokengetsStuckCall extends ethereum.Call {
  get inputs(): InCaseTokengetsStuckCall__Inputs {
    return new InCaseTokengetsStuckCall__Inputs(this);
  }

  get outputs(): InCaseTokengetsStuckCall__Outputs {
    return new InCaseTokengetsStuckCall__Outputs(this);
  }
}

export class InCaseTokengetsStuckCall__Inputs {
  _call: InCaseTokengetsStuckCall;

  constructor(call: InCaseTokengetsStuckCall) {
    this._call = call;
  }

  get _TokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InCaseTokengetsStuckCall__Outputs {
  _call: InCaseTokengetsStuckCall;

  constructor(call: InCaseTokengetsStuckCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCRVTokenAddressesCall extends ethereum.Call {
  get inputs(): SetCRVTokenAddressesCall__Inputs {
    return new SetCRVTokenAddressesCall__Inputs(this);
  }

  get outputs(): SetCRVTokenAddressesCall__Outputs {
    return new SetCRVTokenAddressesCall__Outputs(this);
  }
}

export class SetCRVTokenAddressesCall__Inputs {
  _call: SetCRVTokenAddressesCall;

  constructor(call: SetCRVTokenAddressesCall) {
    this._call = call;
  }
}

export class SetCRVTokenAddressesCall__Outputs {
  _call: SetCRVTokenAddressesCall;

  constructor(call: SetCRVTokenAddressesCall) {
    this._call = call;
  }
}

export class Set_new_dzgoodwillAddressCall extends ethereum.Call {
  get inputs(): Set_new_dzgoodwillAddressCall__Inputs {
    return new Set_new_dzgoodwillAddressCall__Inputs(this);
  }

  get outputs(): Set_new_dzgoodwillAddressCall__Outputs {
    return new Set_new_dzgoodwillAddressCall__Outputs(this);
  }
}

export class Set_new_dzgoodwillAddressCall__Inputs {
  _call: Set_new_dzgoodwillAddressCall;

  constructor(call: Set_new_dzgoodwillAddressCall) {
    this._call = call;
  }

  get _new_dzgoodwillAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Set_new_dzgoodwillAddressCall__Outputs {
  _call: Set_new_dzgoodwillAddressCall;

  constructor(call: Set_new_dzgoodwillAddressCall) {
    this._call = call;
  }
}

export class Set_new_goodwillCall extends ethereum.Call {
  get inputs(): Set_new_goodwillCall__Inputs {
    return new Set_new_goodwillCall__Inputs(this);
  }

  get outputs(): Set_new_goodwillCall__Outputs {
    return new Set_new_goodwillCall__Outputs(this);
  }
}

export class Set_new_goodwillCall__Inputs {
  _call: Set_new_goodwillCall;

  constructor(call: Set_new_goodwillCall) {
    this._call = call;
  }

  get _new_goodwill(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class Set_new_goodwillCall__Outputs {
  _call: Set_new_goodwillCall;

  constructor(call: Set_new_goodwillCall) {
    this._call = call;
  }
}

export class Set_new_sUSDTokenAddressCall extends ethereum.Call {
  get inputs(): Set_new_sUSDTokenAddressCall__Inputs {
    return new Set_new_sUSDTokenAddressCall__Inputs(this);
  }

  get outputs(): Set_new_sUSDTokenAddressCall__Outputs {
    return new Set_new_sUSDTokenAddressCall__Outputs(this);
  }
}

export class Set_new_sUSDTokenAddressCall__Inputs {
  _call: Set_new_sUSDTokenAddressCall;

  constructor(call: Set_new_sUSDTokenAddressCall) {
    this._call = call;
  }

  get _new_sUSDTokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Set_new_sUSDTokenAddressCall__Outputs {
  _call: Set_new_sUSDTokenAddressCall;

  constructor(call: Set_new_sUSDTokenAddressCall) {
    this._call = call;
  }
}

export class SetcTokensCall extends ethereum.Call {
  get inputs(): SetcTokensCall__Inputs {
    return new SetcTokensCall__Inputs(this);
  }

  get outputs(): SetcTokensCall__Outputs {
    return new SetcTokensCall__Outputs(this);
  }
}

export class SetcTokensCall__Inputs {
  _call: SetcTokensCall;

  constructor(call: SetcTokensCall) {
    this._call = call;
  }
}

export class SetcTokensCall__Outputs {
  _call: SetcTokensCall;

  constructor(call: SetcTokensCall) {
    this._call = call;
  }
}

export class SetyTokensCall extends ethereum.Call {
  get inputs(): SetyTokensCall__Inputs {
    return new SetyTokensCall__Inputs(this);
  }

  get outputs(): SetyTokensCall__Outputs {
    return new SetyTokensCall__Outputs(this);
  }
}

export class SetyTokensCall__Inputs {
  _call: SetyTokensCall;

  constructor(call: SetyTokensCall) {
    this._call = call;
  }
}

export class SetyTokensCall__Outputs {
  _call: SetyTokensCall;

  constructor(call: SetyTokensCall) {
    this._call = call;
  }
}

export class ToggleContractActiveCall extends ethereum.Call {
  get inputs(): ToggleContractActiveCall__Inputs {
    return new ToggleContractActiveCall__Inputs(this);
  }

  get outputs(): ToggleContractActiveCall__Outputs {
    return new ToggleContractActiveCall__Outputs(this);
  }
}

export class ToggleContractActiveCall__Inputs {
  _call: ToggleContractActiveCall;

  constructor(call: ToggleContractActiveCall) {
    this._call = call;
  }
}

export class ToggleContractActiveCall__Outputs {
  _call: ToggleContractActiveCall;

  constructor(call: ToggleContractActiveCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
